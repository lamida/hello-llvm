digraph "CFG for 'StrAppend' function" {
	label="CFG for 'StrAppend' function";

	Node0x562a71fed5b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a71fed5b0\":\l  %3 = alloca i8*, align 8\l  %4 = alloca i8*, align 8\l  %5 = alloca i8*, align 8\l  %6 = alloca i8*, align 8\l  %7 = alloca i8*, align 8\l  %8 = alloca i64, align 8\l  %9 = alloca i64, align 8\l  %10 = alloca i64, align 8\l  %11 = alloca i64, align 8\l  store i8* %0, i8** %4, align 8\l  store i8* %1, i8** %5, align 8\l  store i8* %2, i8** %6, align 8\l  %12 = load i8*, i8** %6, align 8\l  %13 = icmp eq i8* %12, null\l  br i1 %13, label %\"0x562a71fed670\", label %\"0x562a71fedd80\"\l|{<s0>T|<s1>F}}"];
	Node0x562a71fed5b0:s0 -> Node0x562a71fed670;
	Node0x562a71fed5b0:s1 -> Node0x562a71fedd80;
	Node0x562a71fed670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{\"0x562a71fed670\":                                 \l  store i8* null, i8** %3, align 8\l  br label %\"0x562a71fedf10\"\l}"];
	Node0x562a71fed670 -> Node0x562a71fedf10;
	Node0x562a71fedd80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#e36c5570",label="{\"0x562a71fedd80\":                                 \l  %14 = load i8*, i8** %4, align 8\l  %15 = icmp eq i8* %14, null\l  br i1 %15, label %\"0x562a71fee040\", label %\"0x562a71fee090 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x562a71fedd80:s0 -> Node0x562a71fee040;
	Node0x562a71fedd80:s1 -> Node0x562a71fee090;
	Node0x562a71fee040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{\"0x562a71fee040\":                                 \l  %16 = load i8*, i8** %6, align 8\l  %17 = call i8* @StrDup(i8* %16)\l  store i8* %17, i8** %3, align 8\l  br label %\"0x562a71fedf10\"\l}"];
	Node0x562a71fee040 -> Node0x562a71fedf10;
	Node0x562a71fee090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{\"0x562a71fee090 - Exit Point\":                    \l  %18 = load i8*, i8** %4, align 8\l  %19 = call i64 @strlen(i8* %18)\l  store i64 %19, i64* %9, align 8\l  %20 = load i8*, i8** %5, align 8\l  %21 = call i64 @strlen(i8* %20)\l  store i64 %21, i64* %10, align 8\l  %22 = load i8*, i8** %6, align 8\l  %23 = call i64 @strlen(i8* %22)\l  store i64 %23, i64* %11, align 8\l  %24 = load i64, i64* %9, align 8\l  %25 = load i64, i64* %10, align 8\l  %26 = add i64 %24, %25\l  %27 = load i64, i64* %11, align 8\l  %28 = add i64 %26, %27\l  %29 = add i64 %28, 1\l  store i64 %29, i64* %8, align 8\l  %30 = load i64, i64* %8, align 8\l  %31 = call i8* @SafeMalloc(i64 %30)\l  store i8* %31, i8** %7, align 8\l  %32 = load i8*, i8** %7, align 8\l  %33 = load i8*, i8** %4, align 8\l  %34 = load i64, i64* %9, align 8\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64\l... %34, i1 false)\l  %35 = load i8*, i8** %4, align 8\l  call void @free(i8* %35)\l  %36 = load i8*, i8** %7, align 8\l  %37 = load i64, i64* %9, align 8\l  %38 = getelementptr inbounds i8, i8* %36, i64 %37\l  %39 = load i8*, i8** %5, align 8\l  %40 = load i64, i64* %10, align 8\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %39, i64\l... %40, i1 false)\l  %41 = load i8*, i8** %7, align 8\l  %42 = load i64, i64* %9, align 8\l  %43 = load i64, i64* %10, align 8\l  %44 = add i64 %42, %43\l  %45 = getelementptr inbounds i8, i8* %41, i64 %44\l  %46 = load i8*, i8** %6, align 8\l  %47 = load i64, i64* %11, align 8\l  %48 = add i64 %47, 1\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %46, i64\l... %48, i1 false)\l  %49 = load i8*, i8** %7, align 8\l  store i8* %49, i8** %3, align 8\l  br label %\"0x562a71fedf10\"\l}"];
	Node0x562a71fee090 -> Node0x562a71fedf10;
	Node0x562a71fedf10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a71fedf10\":                                 \l  %50 = load i8*, i8** %3, align 8\l  ret i8* %50\l}"];
}
