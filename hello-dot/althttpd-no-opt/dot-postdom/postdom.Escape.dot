digraph "Post dominator tree for 'Escape' function" {
	label="Post dominator tree for 'Escape' function";

	Node0x23483e0 [shape=record,label="{Post dominance root node}"];
	Node0x23483e0 -> Node0x2344a70;
	Node0x2344a70 [shape=record,label="{return:                                           \l  %32 = load i8*, i8** %retval, align 8\l  ret i8* %32\l}"];
	Node0x2344a70 -> Node0x22ce840;
	Node0x2344a70 -> Node0x2251760;
	Node0x2344a70 -> Node0x2257ce0;
	Node0x2344a70 -> Node0x22f4920;
	Node0x2344a70 -> Node0x22e2530;
	Node0x22ce840 [shape=record,label="{if.then:                                          \l  %7 = load i8*, i8** %z.addr, align 8\l  store i8* %7, i8** %retval, align 8\l  br label %return\l}"];
	Node0x2251760 [shape=record,label="{for.end:                                          \l  %6 = load i8, i8* %c, align 1\l  %conv5 = sext i8 %6 to i32\l  %cmp6 = icmp eq i32 %conv5, 0\l  br i1 %cmp6, label %if.then, label %if.end\l}"];
	Node0x2251760 -> Node0x22f66b0;
	Node0x22f66b0 [shape=record,label="{land.end:                                         \l  %4 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]\l  br i1 %4, label %for.body, label %for.end\l}"];
	Node0x22f66b0 -> Node0x226b1e0;
	Node0x22f66b0 -> Node0x22b50c0;
	Node0x226b1e0 [shape=record,label="{for.cond:                                         \l  %0 = load i8*, i8** %z.addr, align 8\l  %1 = load i64, i64* %i, align 8\l  %arrayidx = getelementptr inbounds i8, i8* %0, i64 %1\l  %2 = load i8, i8* %arrayidx, align 1\l  store i8 %2, i8* %c, align 1\l  %conv = sext i8 %2 to i32\l  %cmp = icmp ne i32 %conv, 0\l  br i1 %cmp, label %land.rhs, label %land.end\l}"];
	Node0x226b1e0 -> Node0x2291bc0;
	Node0x226b1e0 -> Node0x22d7290;
	Node0x2291bc0 [shape=record,label="{entry:\l  %retval = alloca i8*, align 8\l  %z.addr = alloca i8*, align 8\l  %i = alloca i64, align 8\l  %j = alloca i64, align 8\l  %n = alloca i64, align 8\l  %c = alloca i8, align 1\l  %zOut = alloca i8*, align 8\l  store i8* %z, i8** %z.addr, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x22d7290 [shape=record,label="{for.inc:                                          \l  %5 = load i64, i64* %i, align 8\l  %inc = add i64 %5, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x22d7290 -> Node0x22d4560;
	Node0x22d4560 [shape=record,label="{for.body:                                         \l  br label %for.inc\l}"];
	Node0x22b50c0 [shape=record,label="{land.rhs:                                         \l  %3 = load i8, i8* %c, align 1\l  %conv2 = sext i8 %3 to i32\l  %cmp3 = icmp ne i32 %conv2, 34\l  br label %land.end\l}"];
	Node0x2257ce0 [shape=record,label="{if.then27:                                        \l  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.379, i64 0, i64\l... 0), i8** %retval, align 8\l  br label %return\l}"];
	Node0x22f4920 [shape=record,label="{for.end23:                                        \l  %15 = load i64, i64* %i, align 8\l  %16 = load i64, i64* %n, align 8\l  %add = add i64 %15, %16\l  %add24 = add i64 %add, 1\l  %call = call noalias i8* @malloc(i64 %add24) #7\l  store i8* %call, i8** %zOut, align 8\l  %17 = load i8*, i8** %zOut, align 8\l  %cmp25 = icmp eq i8* %17, null\l  br i1 %cmp25, label %if.then27, label %if.end28\l}"];
	Node0x22f4920 -> Node0x229ebc0;
	Node0x229ebc0 [shape=record,label="{for.cond9:                                        \l  %9 = load i8*, i8** %z.addr, align 8\l  %10 = load i64, i64* %i, align 8\l  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 %10\l  %11 = load i8, i8* %arrayidx10, align 1\l  store i8 %11, i8* %c, align 1\l  %conv11 = sext i8 %11 to i32\l  %cmp12 = icmp ne i32 %conv11, 0\l  br i1 %cmp12, label %for.body14, label %for.end23\l}"];
	Node0x229ebc0 -> Node0x2304680;
	Node0x229ebc0 -> Node0x22ee3c0;
	Node0x2304680 [shape=record,label="{if.end:                                           \l  store i64 1, i64* %n, align 8\l  %8 = load i64, i64* %i, align 8\l  %inc8 = add i64 %8, 1\l  store i64 %inc8, i64* %i, align 8\l  br label %for.cond9\l}"];
	Node0x22ee3c0 [shape=record,label="{for.inc21:                                        \l  %14 = load i64, i64* %i, align 8\l  %inc22 = add i64 %14, 1\l  store i64 %inc22, i64* %i, align 8\l  br label %for.cond9\l}"];
	Node0x22ee3c0 -> Node0x230a0a0;
	Node0x230a0a0 [shape=record,label="{if.end20:                                         \l  br label %for.inc21\l}"];
	Node0x230a0a0 -> Node0x22ccb40;
	Node0x230a0a0 -> Node0x228dcc0;
	Node0x22ccb40 [shape=record,label="{for.body14:                                       \l  %12 = load i8, i8* %c, align 1\l  %conv15 = sext i8 %12 to i32\l  %cmp16 = icmp eq i32 %conv15, 34\l  br i1 %cmp16, label %if.then18, label %if.end20\l}"];
	Node0x228dcc0 [shape=record,label="{if.then18:                                        \l  %13 = load i64, i64* %n, align 8\l  %inc19 = add i64 %13, 1\l  store i64 %inc19, i64* %n, align 8\l  br label %if.end20\l}"];
	Node0x22e2530 [shape=record,label="{for.end46:                                        \l  %29 = load i8*, i8** %zOut, align 8\l  %30 = load i64, i64* %j, align 8\l  %arrayidx47 = getelementptr inbounds i8, i8* %29, i64 %30\l  store i8 0, i8* %arrayidx47, align 1\l  %31 = load i8*, i8** %zOut, align 8\l  store i8* %31, i8** %retval, align 8\l  br label %return\l}"];
	Node0x22e2530 -> Node0x2258140;
	Node0x2258140 [shape=record,label="{for.cond29:                                       \l  %18 = load i8*, i8** %z.addr, align 8\l  %19 = load i64, i64* %i, align 8\l  %arrayidx30 = getelementptr inbounds i8, i8* %18, i64 %19\l  %20 = load i8, i8* %arrayidx30, align 1\l  store i8 %20, i8* %c, align 1\l  %conv31 = sext i8 %20 to i32\l  %cmp32 = icmp ne i32 %conv31, 0\l  br i1 %cmp32, label %for.body34, label %for.end46\l}"];
	Node0x2258140 -> Node0x22f95f0;
	Node0x2258140 -> Node0x22c34e0;
	Node0x22f95f0 [shape=record,label="{if.end28:                                         \l  store i64 0, i64* %j, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond29\l}"];
	Node0x22c34e0 [shape=record,label="{for.inc44:                                        \l  %28 = load i64, i64* %i, align 8\l  %inc45 = add i64 %28, 1\l  store i64 %inc45, i64* %i, align 8\l  br label %for.cond29\l}"];
	Node0x22c34e0 -> Node0x22ea200;
	Node0x22ea200 [shape=record,label="{if.end43:                                         \l  br label %for.inc44\l}"];
	Node0x22ea200 -> Node0x22673b0;
	Node0x22ea200 -> Node0x22b2240;
	Node0x22673b0 [shape=record,label="{for.body34:                                       \l  %21 = load i8, i8* %c, align 1\l  %22 = load i8*, i8** %zOut, align 8\l  %23 = load i64, i64* %j, align 8\l  %inc35 = add i64 %23, 1\l  store i64 %inc35, i64* %j, align 8\l  %arrayidx36 = getelementptr inbounds i8, i8* %22, i64 %23\l  store i8 %21, i8* %arrayidx36, align 1\l  %24 = load i8, i8* %c, align 1\l  %conv37 = sext i8 %24 to i32\l  %cmp38 = icmp eq i32 %conv37, 34\l  br i1 %cmp38, label %if.then40, label %if.end43\l}"];
	Node0x22b2240 [shape=record,label="{if.then40:                                        \l  %25 = load i8, i8* %c, align 1\l  %26 = load i8*, i8** %zOut, align 8\l  %27 = load i64, i64* %j, align 8\l  %inc41 = add i64 %27, 1\l  store i64 %inc41, i64* %j, align 8\l  %arrayidx42 = getelementptr inbounds i8, i8* %26, i64 %27\l  store i8 %25, i8* %arrayidx42, align 1\l  br label %if.end43\l}"];
}
