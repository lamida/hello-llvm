digraph "CFG for 'TestParseRfc822Date' function" {
	label="CFG for 'TestParseRfc822Date' function";

	Node0x563593780600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{\"0x563593780600\":\l  %t.addr.i = alloca i64, align 8\l  %tm.i = alloca %struct.tm*, align 8\l  %t1 = alloca i64, align 8\l  %t2 = alloca i64, align 8\l  store i64 0, i64* %t1, align 8\l  br label %\"0x5635937808e0\"\l}"];
	Node0x563593780600 -> Node0x5635937808e0;
	Node0x5635937808e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x5635937808e0\":                                 \l  %0 = load i64, i64* %t1, align 8\l  %cmp = icmp slt i64 %0, 2147483647\l  br i1 %cmp, label %\"0x563593780b10 - Exit Point\", label %\"0x563593780b90\"\l|{<s0>T|<s1>F}}"];
	Node0x5635937808e0:s0 -> Node0x563593780b10;
	Node0x5635937808e0:s1 -> Node0x563593780b90;
	Node0x563593780b10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563593780b10 - Exit Point\":                    \l  %1 = load i64, i64* %t1, align 8\l  %2 = bitcast i64* %t.addr.i to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2)\l  %3 = bitcast %struct.tm** %tm.i to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3)\l  store i64 %1, i64* %t.addr.i, align 8\l  %call.i = call %struct.tm* @gmtime(i64* %t.addr.i)\l  store %struct.tm* %call.i, %struct.tm** %tm.i, align 8\l  %4 = load %struct.tm*, %struct.tm** %tm.i, align 8\l  %call1.i = call i64 @strftime(i8* getelementptr inbounds ([100 x i8], [100 x\l... i8]* @Rfc822Date.zDate, i64 0, i64 0), i64 100, i8* getelementptr inbounds\l... ([25 x i8], [25 x i8]* @.str.445, i64 0, i64 0), %struct.tm* %4)\l  %5 = bitcast i64* %t.addr.i to i8*\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5)\l  %6 = bitcast %struct.tm** %tm.i to i8*\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6)\l  %call1 = call i64 @ParseRfc822Date(i8* getelementptr inbounds ([100 x i8],\l... [100 x i8]* @Rfc822Date.zDate, i64 0, i64 0))\l  store i64 %call1, i64* %t2, align 8\l  %7 = load i64, i64* %t1, align 8\l  %8 = load i64, i64* %t2, align 8\l  %cmp2 = icmp eq i64 %7, %8\l  br i1 %cmp2, label %\"0x563593781260\", label %\"0x5635937812d0 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x563593780b10:s0 -> Node0x563593781260;
	Node0x563593780b10:s1 -> Node0x5635937812d0;
	Node0x563593781260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563593781260\":                                 \l  br label %\"0x5635937813f0\"\l}"];
	Node0x563593781260 -> Node0x5635937813f0;
	Node0x5635937812d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5977e370",label="{\"0x5635937812d0 - Exit Point\":                    \l  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]*\l... @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]*\l... @.str.14, i64 0, i64 0), i32 670, i8* getelementptr inbounds ([31 x i8], [31\l... x i8]* @__PRETTY_FUNCTION__.TestParseRfc822Date, i64 0, i64 0))\l  unreachable\l}"];
	Node0x5635937813f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x5635937813f0\":                                 \l  br label %\"0x563593782ac0\"\l}"];
	Node0x5635937813f0 -> Node0x563593782ac0;
	Node0x563593782ac0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563593782ac0\":                                 \l  %9 = load i64, i64* %t1, align 8\l  %add = add nsw i64 %9, 127\l  store i64 %add, i64* %t1, align 8\l  br label %\"0x5635937808e0\"\l}"];
	Node0x563593782ac0 -> Node0x5635937808e0;
	Node0x563593780b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{\"0x563593780b90\":                                 \l  ret void\l}"];
}
