digraph "Dominator tree for 'uInt64_toAscii' function" {
	label="Dominator tree for 'uInt64_toAscii' function";

	Node0xda8f40 [shape=record,label="{%2:\l  %3 = alloca i8*, align 8\l  %4 = alloca %struct.UInt64*, align 8\l  %5 = alloca i32, align 4\l  %6 = alloca i32, align 4\l  %7 = alloca [32 x i8], align 16\l  %8 = alloca i32, align 4\l  %9 = alloca %struct.UInt64, align 1\l  store i8* %0, i8** %3, align 8\l  store %struct.UInt64* %1, %struct.UInt64** %4, align 8\l  store i32 0, i32* %8, align 4\l  %10 = load %struct.UInt64*, %struct.UInt64** %4, align 8\l  %11 = bitcast %struct.UInt64* %9 to i8*\l  %12 = bitcast %struct.UInt64* %10 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %12, i64\l... 8, i1 false)\l  br label %13\l}"];
	Node0xda8f40 -> Node0xdaf610;
	Node0xdaf610 [shape=record,label="{%13:\l13:                                               \l  %14 = call i32 @uInt64_qrm10(%struct.UInt64* %9)\l  store i32 %14, i32* %6, align 4\l  %15 = load i32, i32* %6, align 4\l  %16 = add nsw i32 %15, 48\l  %17 = trunc i32 %16 to i8\l  %18 = load i32, i32* %8, align 4\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 %19\l  store i8 %17, i8* %20, align 1\l  %21 = load i32, i32* %8, align 4\l  %22 = add nsw i32 %21, 1\l  store i32 %22, i32* %8, align 4\l  br label %23\l}"];
	Node0xdaf610 -> Node0xc09670;
	Node0xc09670 [shape=record,label="{%23:\l23:                                               \l  %24 = call zeroext i8 @uInt64_isZero(%struct.UInt64* %9)\l  %25 = icmp ne i8 %24, 0\l  %26 = xor i1 %25, true\l  br i1 %26, label %13, label %27\l}"];
	Node0xc09670 -> Node0xcdaa70;
	Node0xcdaa70 [shape=record,label="{%27:\l27:                                               \l  %28 = load i8*, i8** %3, align 8\l  %29 = load i32, i32* %8, align 4\l  %30 = sext i32 %29 to i64\l  %31 = getelementptr inbounds i8, i8* %28, i64 %30\l  store i8 0, i8* %31, align 1\l  store i32 0, i32* %5, align 4\l  br label %32\l}"];
	Node0xcdaa70 -> Node0xcc2c30;
	Node0xcc2c30 [shape=record,label="{%32:\l32:                                               \l  %33 = load i32, i32* %5, align 4\l  %34 = load i32, i32* %8, align 4\l  %35 = icmp slt i32 %33, %34\l  br i1 %35, label %36, label %51\l}"];
	Node0xcc2c30 -> Node0xa80c80;
	Node0xcc2c30 -> Node0xcb7310;
	Node0xa80c80 [shape=record,label="{%36:\l36:                                               \l  %37 = load i32, i32* %8, align 4\l  %38 = load i32, i32* %5, align 4\l  %39 = sub nsw i32 %37, %38\l  %40 = sub nsw i32 %39, 1\l  %41 = sext i32 %40 to i64\l  %42 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 %41\l  %43 = load i8, i8* %42, align 1\l  %44 = load i8*, i8** %3, align 8\l  %45 = load i32, i32* %5, align 4\l  %46 = sext i32 %45 to i64\l  %47 = getelementptr inbounds i8, i8* %44, i64 %46\l  store i8 %43, i8* %47, align 1\l  br label %48\l}"];
	Node0xa80c80 -> Node0xcd8120;
	Node0xcd8120 [shape=record,label="{%48:\l48:                                               \l  %49 = load i32, i32* %5, align 4\l  %50 = add nsw i32 %49, 1\l  store i32 %50, i32* %5, align 4\l  br label %32\l}"];
	Node0xcb7310 [shape=record,label="{%51:\l51:                                               \l  ret void\l}"];
}
