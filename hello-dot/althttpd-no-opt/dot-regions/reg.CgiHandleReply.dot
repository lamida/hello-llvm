digraph "Region Graph for 'CgiHandleReply' function" {
	label="Region Graph for 'CgiHandleReply' function";

	Node0x8ac6d0 [shape=record,label="{entry:\l  %in.addr = alloca %struct._IO_FILE*, align 8\l  %seenContentLength = alloca i32, align 4\l  %contentLength = alloca i32, align 4\l  %nRes = alloca i64, align 8\l  %nMalloc = alloca i64, align 8\l  %aRes = alloca i8*, align 8\l  %c = alloca i32, align 4\l  %z = alloca i8*, align 8\l  %iStatus = alloca i32, align 4\l  %zLine = alloca [1000 x i8], align 16\l  %i = alloca i32, align 4\l  %nLine = alloca i64, align 8\l  store %struct._IO_FILE* %in, %struct._IO_FILE** %in.addr, align 8\l  store i32 0, i32* %seenContentLength, align 4\l  store i32 0, i32* %contentLength, align 4\l  store i64 0, i64* %nRes, align 8\l  store i64 0, i64* %nMalloc, align 8\l  store i8* null, i8** %aRes, align 8\l  store i32 0, i32* %iStatus, align 4\l  %0 = load i32, i32* @useTimeout, align 4\l  %tobool = icmp ne i32 %0, 0\l  br i1 %tobool, label %if.then, label %if.end\l}"];
	Node0x8ac6d0 -> Node0x93a3c0;
	Node0x8ac6d0 -> Node0x8b7f60;
	Node0x93a3c0 [shape=record,label="{if.then:                                          \l  %call = call i32 @alarm(i32 0) #7\l  br label %if.end\l}"];
	Node0x93a3c0 -> Node0x8b7f60;
	Node0x8b7f60 [shape=record,label="{if.end:                                           \l  br label %while.cond\l}"];
	Node0x8b7f60 -> Node0x92e630;
	Node0x92e630 [shape=record,label="{while.cond:                                       \l  %arraydecay = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8\l  %call1 = call i8* @fgets(i8* %arraydecay, i32 1000, %struct._IO_FILE* %1)\l  %tobool2 = icmp ne i8* %call1, null\l  br i1 %tobool2, label %land.rhs, label %land.end\l}"];
	Node0x92e630 -> Node0x8aa3c0;
	Node0x92e630 -> Node0x8b0500;
	Node0x8aa3c0 [shape=record,label="{land.rhs:                                         \l  %call3 = call i16** @__ctype_b_loc() #8\l  %2 = load i16*, i16** %call3, align 8\l  %arrayidx = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64 0,\l... i64 0\l  %3 = load i8, i8* %arrayidx, align 16\l  %conv = zext i8 %3 to i32\l  %idxprom = sext i32 %conv to i64\l  %arrayidx4 = getelementptr inbounds i16, i16* %2, i64 %idxprom\l  %4 = load i16, i16* %arrayidx4, align 2\l  %conv5 = zext i16 %4 to i32\l  %and = and i32 %conv5, 8192\l  %tobool6 = icmp ne i32 %and, 0\l  %lnot = xor i1 %tobool6, true\l  br label %land.end\l}"];
	Node0x8aa3c0 -> Node0x8b0500;
	Node0x8b0500 [shape=record,label="{land.end:                                         \l  %5 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]\l  br i1 %5, label %while.body, label %while.end79\l}"];
	Node0x8b0500 -> Node0x8ddfd0;
	Node0x8b0500 -> Node0x90f900;
	Node0x8ddfd0 [shape=record,label="{while.body:                                       \l  %arraydecay7 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %call8 = call i32 @strncasecmp(i8* %arraydecay7, i8* getelementptr inbounds\l... ([10 x i8], [10 x i8]* @.str.512, i64 0, i64 0), i64 9) #9\l  %cmp = icmp eq i32 %call8, 0\l  br i1 %cmp, label %if.then10, label %if.else\l}"];
	Node0x8ddfd0 -> Node0x92e460;
	Node0x8ddfd0 -> Node0x9601c0;
	Node0x92e460 [shape=record,label="{if.then10:                                        \l  call void @StartResponse(i8* getelementptr inbounds ([13 x i8], [13 x i8]*\l... @.str.513, i64 0, i64 0))\l  %arraydecay11 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  call void @RemoveNewline(i8* %arraydecay11)\l  %arrayidx12 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 10\l  store i8* %arrayidx12, i8** %z, align 8\l  br label %while.cond13\l}"];
	Node0x92e460 -> Node0x8cb360;
	Node0x8cb360 [shape=record,label="{while.cond13:                                     \l  %call14 = call i16** @__ctype_b_loc() #8\l  %6 = load i16*, i16** %call14, align 8\l  %7 = load i8*, i8** %z, align 8\l  %8 = load i8, i8* %7, align 1\l  %conv15 = zext i8 %8 to i32\l  %idxprom16 = sext i32 %conv15 to i64\l  %arrayidx17 = getelementptr inbounds i16, i16* %6, i64 %idxprom16\l  %9 = load i16, i16* %arrayidx17, align 2\l  %conv18 = zext i16 %9 to i32\l  %and19 = and i32 %conv18, 8192\l  %tobool20 = icmp ne i32 %and19, 0\l  br i1 %tobool20, label %while.body21, label %while.end\l}"];
	Node0x8cb360 -> Node0x8cb180;
	Node0x8cb360 -> Node0x8cbb10;
	Node0x8cb180 [shape=record,label="{while.body21:                                     \l  %10 = load i8*, i8** %z, align 8\l  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1\l  store i8* %incdec.ptr, i8** %z, align 8\l  br label %while.cond13\l}"];
	Node0x8cb180 -> Node0x8cb360[constraint=false];
	Node0x8cbb10 [shape=record,label="{while.end:                                        \l  %11 = load i8*, i8** %z, align 8\l  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8],\l... [15 x i8]* @.str.514, i64 0, i64 0), i8* %11)\l  %12 = load i32, i32* @nOut, align 4\l  %add = add nsw i32 %12, %call22\l  store i32 %add, i32* @nOut, align 4\l  store i32 0, i32* @rangeEnd, align 4\l  br label %if.end78\l}"];
	Node0x8cbb10 -> Node0x95daf0;
	Node0x95daf0 [shape=record,label="{if.end78:                                         \l  br label %while.cond\l}"];
	Node0x95daf0 -> Node0x92e630[constraint=false];
	Node0x9601c0 [shape=record,label="{if.else:                                          \l  %arraydecay23 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %call24 = call i32 @strncasecmp(i8* %arraydecay23, i8* getelementptr\l... inbounds ([8 x i8], [8 x i8]* @.str.515, i64 0, i64 0), i64 7) #9\l  %cmp25 = icmp eq i32 %call24, 0\l  br i1 %cmp25, label %if.then27, label %if.else49\l}"];
	Node0x9601c0 -> Node0x901b10;
	Node0x9601c0 -> Node0x9278c0;
	Node0x901b10 [shape=record,label="{if.then27:                                        \l  store i32 7, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x901b10 -> Node0x8f09a0;
	Node0x8f09a0 [shape=record,label="{for.cond:                                         \l  %call28 = call i16** @__ctype_b_loc() #8\l  %13 = load i16*, i16** %call28, align 8\l  %14 = load i32, i32* %i, align 4\l  %idxprom29 = sext i32 %14 to i64\l  %arrayidx30 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 %idxprom29\l  %15 = load i8, i8* %arrayidx30, align 1\l  %conv31 = zext i8 %15 to i32\l  %idxprom32 = sext i32 %conv31 to i64\l  %arrayidx33 = getelementptr inbounds i16, i16* %13, i64 %idxprom32\l  %16 = load i16, i16* %arrayidx33, align 2\l  %conv34 = zext i16 %16 to i32\l  %and35 = and i32 %conv34, 8192\l  %tobool36 = icmp ne i32 %and35, 0\l  br i1 %tobool36, label %for.body, label %for.end\l}"];
	Node0x8f09a0 -> Node0x8c97f0;
	Node0x8f09a0 -> Node0x8d99f0;
	Node0x8c97f0 [shape=record,label="{for.body:                                         \l  br label %for.inc\l}"];
	Node0x8c97f0 -> Node0x90d000;
	Node0x90d000 [shape=record,label="{for.inc:                                          \l  %17 = load i32, i32* %i, align 4\l  %inc = add nsw i32 %17, 1\l  store i32 %inc, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x90d000 -> Node0x8f09a0[constraint=false];
	Node0x8d99f0 [shape=record,label="{for.end:                                          \l  %18 = load i8*, i8** @zProtocol, align 8\l  %19 = load i32, i32* %i, align 4\l  %idxprom37 = sext i32 %19 to i64\l  %arrayidx38 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 %idxprom37\l  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8],\l... [6 x i8]* @.str.516, i64 0, i64 0), i8* %18, i8* %arrayidx38)\l  %20 = load i32, i32* @nOut, align 4\l  %add40 = add nsw i32 %20, %call39\l  store i32 %add40, i32* @nOut, align 4\l  %21 = load i32, i32* %i, align 4\l  %idxprom41 = sext i32 %21 to i64\l  %arrayidx42 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 %idxprom41\l  %call43 = call i8* @strncpy(i8* getelementptr inbounds ([4 x i8], [4 x i8]*\l... @zReplyStatus, i64 0, i64 0), i8* %arrayidx42, i64 3) #7\l  store i8 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @zReplyStatus,\l... i64 0, i64 3), align 1\l  %call44 = call i32 @atoi(i8* getelementptr inbounds ([4 x i8], [4 x i8]*\l... @zReplyStatus, i64 0, i64 0)) #9\l  store i32 %call44, i32* %iStatus, align 4\l  %22 = load i32, i32* %iStatus, align 4\l  %cmp45 = icmp ne i32 %22, 200\l  br i1 %cmp45, label %if.then47, label %if.end48\l}"];
	Node0x8d99f0 -> Node0x89d910;
	Node0x8d99f0 -> Node0x908830;
	Node0x89d910 [shape=record,label="{if.then47:                                        \l  store i32 0, i32* @rangeEnd, align 4\l  br label %if.end48\l}"];
	Node0x89d910 -> Node0x908830;
	Node0x908830 [shape=record,label="{if.end48:                                         \l  store i32 1, i32* @statusSent, align 4\l  br label %if.end77\l}"];
	Node0x908830 -> Node0x8d0120;
	Node0x8d0120 [shape=record,label="{if.end77:                                         \l  br label %if.end78\l}"];
	Node0x8d0120 -> Node0x95daf0;
	Node0x9278c0 [shape=record,label="{if.else49:                                        \l  %arraydecay50 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %call51 = call i32 @strncasecmp(i8* %arraydecay50, i8* getelementptr\l... inbounds ([16 x i8], [16 x i8]* @.str.349, i64 0, i64 0), i64 15) #9\l  %cmp52 = icmp eq i32 %call51, 0\l  br i1 %cmp52, label %if.then54, label %if.else57\l}"];
	Node0x9278c0 -> Node0x912700;
	Node0x9278c0 -> Node0x8ed3b0;
	Node0x912700 [shape=record,label="{if.then54:                                        \l  store i32 1, i32* %seenContentLength, align 4\l  %arraydecay55 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %add.ptr = getelementptr inbounds i8, i8* %arraydecay55, i64 15\l  %call56 = call i32 @atoi(i8* %add.ptr) #9\l  store i32 %call56, i32* %contentLength, align 4\l  br label %if.end76\l}"];
	Node0x912700 -> Node0x8f9c40;
	Node0x8f9c40 [shape=record,label="{if.end76:                                         \l  br label %if.end77\l}"];
	Node0x8f9c40 -> Node0x8d0120;
	Node0x8ed3b0 [shape=record,label="{if.else57:                                        \l  %arraydecay58 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %call59 = call i64 @strlen(i8* %arraydecay58) #9\l  store i64 %call59, i64* %nLine, align 8\l  %23 = load i64, i64* %nRes, align 8\l  %24 = load i64, i64* %nLine, align 8\l  %add60 = add i64 %23, %24\l  %25 = load i64, i64* %nMalloc, align 8\l  %cmp61 = icmp uge i64 %add60, %25\l  br i1 %cmp61, label %if.then63, label %if.end72\l}"];
	Node0x8ed3b0 -> Node0x8fdc30;
	Node0x8ed3b0 -> Node0x8c25e0;
	Node0x8fdc30 [shape=record,label="{if.then63:                                        \l  %26 = load i64, i64* %nMalloc, align 8\l  %27 = load i64, i64* %nLine, align 8\l  %mul = mul i64 %27, 2\l  %add64 = add i64 %26, %mul\l  %28 = load i64, i64* %nMalloc, align 8\l  %add65 = add i64 %28, %add64\l  store i64 %add65, i64* %nMalloc, align 8\l  %29 = load i8*, i8** %aRes, align 8\l  %30 = load i64, i64* %nMalloc, align 8\l  %add66 = add i64 %30, 1\l  %call67 = call i8* @realloc(i8* %29, i64 %add66) #7\l  store i8* %call67, i8** %aRes, align 8\l  %31 = load i8*, i8** %aRes, align 8\l  %cmp68 = icmp eq i8* %31, null\l  br i1 %cmp68, label %if.then70, label %if.end71\l}"];
	Node0x8fdc30 -> Node0x9007f0;
	Node0x8fdc30 -> Node0x928dc0;
	Node0x9007f0 [shape=record,label="{if.then70:                                        \l  %32 = load i64, i64* %nMalloc, align 8\l  call void (i32, i8*, ...) @Malfunction(i32 600, i8* getelementptr inbounds\l... ([24 x i8], [24 x i8]* @.str.517, i64 0, i64 0), i64 %32)\l  br label %if.end71\l}"];
	Node0x9007f0 -> Node0x928dc0;
	Node0x928dc0 [shape=record,label="{if.end71:                                         \l  br label %if.end72\l}"];
	Node0x928dc0 -> Node0x8c25e0;
	Node0x8c25e0 [shape=record,label="{if.end72:                                         \l  %33 = load i8*, i8** %aRes, align 8\l  %34 = load i64, i64* %nRes, align 8\l  %add.ptr73 = getelementptr inbounds i8, i8* %33, i64 %34\l  %arraydecay74 = getelementptr inbounds [1000 x i8], [1000 x i8]* %zLine, i64\l... 0, i64 0\l  %35 = load i64, i64* %nLine, align 8\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr73, i8* align 16\l... %arraydecay74, i64 %35, i1 false)\l  %36 = load i64, i64* %nLine, align 8\l  %37 = load i64, i64* %nRes, align 8\l  %add75 = add i64 %37, %36\l  store i64 %add75, i64* %nRes, align 8\l  br label %if.end76\l}"];
	Node0x8c25e0 -> Node0x8f9c40;
	Node0x90f900 [shape=record,label="{while.end79:                                      \l  %38 = load i32, i32* @rangeEnd, align 4\l  %cmp80 = icmp sgt i32 %38, 0\l  br i1 %cmp80, label %land.lhs.true, label %if.else95\l}"];
	Node0x90f900 -> Node0x9130e0;
	Node0x90f900 -> Node0x971020;
	Node0x9130e0 [shape=record,label="{land.lhs.true:                                    \l  %39 = load i32, i32* %seenContentLength, align 4\l  %tobool82 = icmp ne i32 %39, 0\l  br i1 %tobool82, label %land.lhs.true83, label %if.else95\l}"];
	Node0x9130e0 -> Node0x8b9c60;
	Node0x9130e0 -> Node0x971020;
	Node0x8b9c60 [shape=record,label="{land.lhs.true83:                                  \l  %40 = load i32, i32* @rangeStart, align 4\l  %41 = load i32, i32* %contentLength, align 4\l  %cmp84 = icmp slt i32 %40, %41\l  br i1 %cmp84, label %if.then86, label %if.else95\l}"];
	Node0x8b9c60 -> Node0x89d710;
	Node0x8b9c60 -> Node0x971020;
	Node0x89d710 [shape=record,label="{if.then86:                                        \l  call void @StartResponse(i8* getelementptr inbounds ([20 x i8], [20 x i8]*\l... @.str.518, i64 0, i64 0))\l  %42 = load i32, i32* @rangeEnd, align 4\l  %43 = load i32, i32* %contentLength, align 4\l  %cmp87 = icmp sge i32 %42, %43\l  br i1 %cmp87, label %if.then89, label %if.end90\l}"];
	Node0x89d710 -> Node0x967b10;
	Node0x89d710 -> Node0x8d1e10;
	Node0x967b10 [shape=record,label="{if.then89:                                        \l  %44 = load i32, i32* %contentLength, align 4\l  %sub = sub nsw i32 %44, 1\l  store i32 %sub, i32* @rangeEnd, align 4\l  br label %if.end90\l}"];
	Node0x967b10 -> Node0x8d1e10;
	Node0x8d1e10 [shape=record,label="{if.end90:                                         \l  %45 = load i32, i32* @rangeStart, align 4\l  %46 = load i32, i32* @rangeEnd, align 4\l  %47 = load i32, i32* %contentLength, align 4\l  %call91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8],\l... [32 x i8]* @.str.519, i64 0, i64 0), i32 %45, i32 %46, i32 %47)\l  %48 = load i32, i32* @nOut, align 4\l  %add92 = add nsw i32 %48, %call91\l  store i32 %add92, i32* @nOut, align 4\l  %49 = load i32, i32* @rangeEnd, align 4\l  %add93 = add nsw i32 %49, 1\l  %50 = load i32, i32* @rangeStart, align 4\l  %sub94 = sub nsw i32 %add93, %50\l  store i32 %sub94, i32* %contentLength, align 4\l  br label %if.end96\l}"];
	Node0x8d1e10 -> Node0x898ef0;
	Node0x898ef0 [shape=record,label="{if.end96:                                         \l  %51 = load i64, i64* %nRes, align 8\l  %cmp97 = icmp ugt i64 %51, 0\l  br i1 %cmp97, label %if.then99, label %if.end105\l}"];
	Node0x898ef0 -> Node0x8dc5d0;
	Node0x898ef0 -> Node0x916980;
	Node0x8dc5d0 [shape=record,label="{if.then99:                                        \l  %52 = load i8*, i8** %aRes, align 8\l  %53 = load i64, i64* %nRes, align 8\l  %arrayidx100 = getelementptr inbounds i8, i8* %52, i64 %53\l  store i8 0, i8* %arrayidx100, align 1\l  %54 = load i8*, i8** %aRes, align 8\l  %call101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8],\l... [3 x i8]* @.str.391, i64 0, i64 0), i8* %54)\l  %55 = load i64, i64* %nRes, align 8\l  %56 = load i32, i32* @nOut, align 4\l  %conv102 = sext i32 %56 to i64\l  %add103 = add i64 %conv102, %55\l  %conv104 = trunc i64 %add103 to i32\l  store i32 %conv104, i32* @nOut, align 4\l  store i64 0, i64* %nRes, align 8\l  br label %if.end105\l}"];
	Node0x8dc5d0 -> Node0x916980;
	Node0x916980 [shape=record,label="{if.end105:                                        \l  %57 = load i32, i32* %iStatus, align 4\l  %cmp106 = icmp eq i32 %57, 304\l  br i1 %cmp106, label %if.then108, label %if.else111\l}"];
	Node0x916980 -> Node0x916550;
	Node0x916980 -> Node0x906ec0;
	Node0x916550 [shape=record,label="{if.then108:                                       \l  %call109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8],\l... [5 x i8]* @.str.521, i64 0, i64 0))\l  %58 = load i32, i32* @nOut, align 4\l  %add110 = add nsw i32 %58, %call109\l  store i32 %add110, i32* @nOut, align 4\l  br label %if.end149\l}"];
	Node0x916550 -> Node0x8d02b0;
	Node0x8d02b0 [shape=record,label="{if.end149:                                        \l  %84 = load i8*, i8** %aRes, align 8\l  call void @free(i8* %84) #7\l  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8\l  %call150 = call i32 @fclose(%struct._IO_FILE* %85)\l  ret void\l}"];
	Node0x906ec0 [shape=record,label="{if.else111:                                       \l  %59 = load i32, i32* %seenContentLength, align 4\l  %tobool112 = icmp ne i32 %59, 0\l  br i1 %tobool112, label %if.then113, label %if.else116\l}"];
	Node0x906ec0 -> Node0x8d5c50;
	Node0x906ec0 -> Node0x8b86a0;
	Node0x8d5c50 [shape=record,label="{if.then113:                                       \l  %60 = load i32, i32* %contentLength, align 4\l  %call114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x\l... i8], [23 x i8]* @.str.522, i64 0, i64 0), i32 %60)\l  %61 = load i32, i32* @nOut, align 4\l  %add115 = add nsw i32 %61, %call114\l  store i32 %add115, i32* @nOut, align 4\l  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8\l  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8\l  %64 = load i32, i32* %contentLength, align 4\l  %65 = load i32, i32* @rangeStart, align 4\l  call void @xferBytes(%struct._IO_FILE* %62, %struct._IO_FILE* %63, i32 %64,\l... i32 %65)\l  br label %if.end148\l}"];
	Node0x8d5c50 -> Node0x8fc550;
	Node0x8fc550 [shape=record,label="{if.end148:                                        \l  br label %if.end149\l}"];
	Node0x8fc550 -> Node0x8d02b0;
	Node0x8b86a0 [shape=record,label="{if.else116:                                       \l  br label %while.cond117\l}"];
	Node0x8b86a0 -> Node0x8feaa0;
	Node0x8feaa0 [shape=record,label="{while.cond117:                                    \l  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8\l  %call118 = call i32 @getc(%struct._IO_FILE* %66)\l  store i32 %call118, i32* %c, align 4\l  %cmp119 = icmp ne i32 %call118, -1\l  br i1 %cmp119, label %while.body121, label %while.end137\l}"];
	Node0x8feaa0 -> Node0x8b8de0;
	Node0x8feaa0 -> Node0x8fae50;
	Node0x8b8de0 [shape=record,label="{while.body121:                                    \l  %67 = load i64, i64* %nRes, align 8\l  %68 = load i64, i64* %nMalloc, align 8\l  %cmp122 = icmp uge i64 %67, %68\l  br i1 %cmp122, label %if.then124, label %if.end133\l}"];
	Node0x8b8de0 -> Node0x8aee60;
	Node0x8b8de0 -> Node0x8f0010;
	Node0x8aee60 [shape=record,label="{if.then124:                                       \l  %69 = load i64, i64* %nMalloc, align 8\l  %mul125 = mul i64 %69, 2\l  %add126 = add i64 %mul125, 1000\l  store i64 %add126, i64* %nMalloc, align 8\l  %70 = load i8*, i8** %aRes, align 8\l  %71 = load i64, i64* %nMalloc, align 8\l  %add127 = add i64 %71, 1\l  %call128 = call i8* @realloc(i8* %70, i64 %add127) #7\l  store i8* %call128, i8** %aRes, align 8\l  %72 = load i8*, i8** %aRes, align 8\l  %cmp129 = icmp eq i8* %72, null\l  br i1 %cmp129, label %if.then131, label %if.end132\l}"];
	Node0x8aee60 -> Node0x90d9d0;
	Node0x8aee60 -> Node0x8b4c40;
	Node0x90d9d0 [shape=record,label="{if.then131:                                       \l  %73 = load i64, i64* %nMalloc, align 8\l  call void (i32, i8*, ...) @Malfunction(i32 610, i8* getelementptr inbounds\l... ([24 x i8], [24 x i8]* @.str.517, i64 0, i64 0), i64 %73)\l  br label %if.end132\l}"];
	Node0x90d9d0 -> Node0x8b4c40;
	Node0x8b4c40 [shape=record,label="{if.end132:                                        \l  br label %if.end133\l}"];
	Node0x8b4c40 -> Node0x8f0010;
	Node0x8f0010 [shape=record,label="{if.end133:                                        \l  %74 = load i32, i32* %c, align 4\l  %conv134 = trunc i32 %74 to i8\l  %75 = load i8*, i8** %aRes, align 8\l  %76 = load i64, i64* %nRes, align 8\l  %inc135 = add i64 %76, 1\l  store i64 %inc135, i64* %nRes, align 8\l  %arrayidx136 = getelementptr inbounds i8, i8* %75, i64 %76\l  store i8 %conv134, i8* %arrayidx136, align 1\l  br label %while.cond117\l}"];
	Node0x8f0010 -> Node0x8feaa0[constraint=false];
	Node0x8fae50 [shape=record,label="{while.end137:                                     \l  %77 = load i64, i64* %nRes, align 8\l  %tobool138 = icmp ne i64 %77, 0\l  br i1 %tobool138, label %if.then139, label %if.else144\l}"];
	Node0x8fae50 -> Node0x8dd230;
	Node0x8fae50 -> Node0x8e7600;
	Node0x8dd230 [shape=record,label="{if.then139:                                       \l  %78 = load i8*, i8** %aRes, align 8\l  %79 = load i64, i64* %nRes, align 8\l  %arrayidx140 = getelementptr inbounds i8, i8* %78, i64 %79\l  store i8 0, i8* %arrayidx140, align 1\l  %80 = load i64, i64* %nRes, align 8\l  %conv141 = trunc i64 %80 to i32\l  %81 = load i8*, i8** %aRes, align 8\l  %call142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x\l... i8], [25 x i8]* @.str.523, i64 0, i64 0), i32 %conv141, i8* %81)\l  %82 = load i32, i32* @nOut, align 4\l  %add143 = add nsw i32 %82, %call142\l  store i32 %add143, i32* @nOut, align 4\l  br label %if.end147\l}"];
	Node0x8dd230 -> Node0x945f00;
	Node0x945f00 [shape=record,label="{if.end147:                                        \l  br label %if.end148\l}"];
	Node0x945f00 -> Node0x8fc550;
	Node0x8e7600 [shape=record,label="{if.else144:                                       \l  %call145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x\l... i8], [22 x i8]* @.str.524, i64 0, i64 0))\l  %83 = load i32, i32* @nOut, align 4\l  %add146 = add nsw i32 %83, %call145\l  store i32 %add146, i32* @nOut, align 4\l  br label %if.end147\l}"];
	Node0x8e7600 -> Node0x945f00;
	Node0x971020 [shape=record,label="{if.else95:                                        \l  call void @StartResponse(i8* getelementptr inbounds ([7 x i8], [7 x i8]*\l... @.str.520, i64 0, i64 0))\l  br label %if.end96\l}"];
	Node0x971020 -> Node0x898ef0;
	colorscheme = "paired12"
        subgraph cluster_0x97ce50 {
          label = "";
          style = filled;
          color = 1
          subgraph cluster_0x9bcdc0 {
            label = "";
            style = filled;
            color = 3
            Node0x8ac6d0;
            Node0x93a3c0;
          }
          subgraph cluster_0x9bcd40 {
            label = "";
            style = filled;
            color = 3
            subgraph cluster_0x9bccc0 {
              label = "";
              style = filled;
              color = 5
              Node0x92e630;
              Node0x8aa3c0;
            }
            subgraph cluster_0x99e230 {
              label = "";
              style = filled;
              color = 5
              subgraph cluster_0x97d050 {
                label = "";
                style = filled;
                color = 7
                Node0x8cb360;
                Node0x8cb180;
              }
              subgraph cluster_0x99e1b0 {
                label = "";
                style = filled;
                color = 7
                subgraph cluster_0x9b8b20 {
                  label = "";
                  style = filled;
                  color = 9
                  Node0x8f09a0;
                  Node0x8c97f0;
                  Node0x90d000;
                }
                subgraph cluster_0x99dcc0 {
                  label = "";
                  style = filled;
                  color = 9
                  Node0x8d99f0;
                  Node0x89d910;
                }
                subgraph cluster_0x97ec00 {
                  label = "";
                  style = filled;
                  color = 9
                  subgraph cluster_0x97e940 {
                    label = "";
                    style = filled;
                    color = 11
                    subgraph cluster_0x9b8ba0 {
                      label = "";
                      style = filled;
                      color = 1
                      Node0x8fdc30;
                      Node0x9007f0;
                    }
                    Node0x8ed3b0;
                    Node0x928dc0;
                  }
                  Node0x9278c0;
                  Node0x912700;
                  Node0x8c25e0;
                }
                Node0x9601c0;
                Node0x901b10;
                Node0x908830;
                Node0x8f9c40;
              }
              Node0x8ddfd0;
              Node0x92e460;
              Node0x8cbb10;
              Node0x8d0120;
            }
            Node0x8b0500;
            Node0x95daf0;
          }
          subgraph cluster_0x9bcc40 {
            label = "";
            style = filled;
            color = 3
            subgraph cluster_0x99e2b0 {
              label = "";
              style = filled;
              color = 5
              Node0x89d710;
              Node0x967b10;
            }
            Node0x90f900;
            Node0x9130e0;
            Node0x8b9c60;
            Node0x8d1e10;
            Node0x971020;
          }
          subgraph cluster_0x9bcbc0 {
            label = "";
            style = filled;
            color = 3
            Node0x898ef0;
            Node0x8dc5d0;
          }
          subgraph cluster_0x9bbe40 {
            label = "";
            style = filled;
            color = 3
            subgraph cluster_0x9bbdc0 {
              label = "";
              style = filled;
              color = 5
              subgraph cluster_0x9bbd40 {
                label = "";
                style = filled;
                color = 7
                subgraph cluster_0x9bbc40 {
                  label = "";
                  style = filled;
                  color = 9
                  subgraph cluster_0x9bbbc0 {
                    label = "";
                    style = filled;
                    color = 11
                    Node0x8aee60;
                    Node0x90d9d0;
                  }
                  Node0x8b8de0;
                  Node0x8b4c40;
                }
                Node0x8feaa0;
                Node0x8f0010;
              }
              subgraph cluster_0x9bbcc0 {
                label = "";
                style = filled;
                color = 7
                Node0x8fae50;
                Node0x8dd230;
                Node0x8e7600;
              }
              Node0x906ec0;
              Node0x8d5c50;
              Node0x8b86a0;
              Node0x945f00;
            }
            Node0x916980;
            Node0x916550;
            Node0x8fc550;
          }
          Node0x8b7f60;
          Node0x8d02b0;
        }
}
