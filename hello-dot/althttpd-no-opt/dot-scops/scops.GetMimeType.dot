digraph "Scop Graph for 'GetMimeType' function" {
	label="Scop Graph for 'GetMimeType' function";

	Node0x1fe3750 [shape=record,label="{entry:\l  %retval = alloca i8*, align 8\l  %zName.addr = alloca i8*, align 8\l  %nName.addr = alloca i32, align 4\l  %z = alloca i8*, align 8\l  %i = alloca i32, align 4\l  %first = alloca i32, align 4\l  %last = alloca i32, align 4\l  %len = alloca i32, align 4\l  %zSuffix = alloca [20 x i8], align 16\l  %c = alloca i32, align 4\l  store i8* %zName, i8** %zName.addr, align 8\l  store i32 %nName, i32* %nName.addr, align 4\l  %0 = load i32, i32* %nName.addr, align 4\l  %sub = sub nsw i32 %0, 1\l  store i32 %sub, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x1fe3750 -> Node0x204fbb0;
	Node0x204fbb0 [shape=record,label="{for.cond:                                         \l  %1 = load i32, i32* %i, align 4\l  %cmp = icmp sgt i32 %1, 0\l  br i1 %cmp, label %land.rhs, label %land.end\l}"];
	Node0x204fbb0 -> Node0x2033a30;
	Node0x204fbb0 -> Node0x2036d30;
	Node0x2033a30 [shape=record,label="{land.rhs:                                         \l  %2 = load i8*, i8** %zName.addr, align 8\l  %3 = load i32, i32* %i, align 4\l  %idxprom = sext i32 %3 to i64\l  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom\l  %4 = load i8, i8* %arrayidx, align 1\l  %conv = sext i8 %4 to i32\l  %cmp1 = icmp ne i32 %conv, 46\l  br label %land.end\l}"];
	Node0x2033a30 -> Node0x2036d30;
	Node0x2036d30 [shape=record,label="{land.end:                                         \l  %5 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]\l  br i1 %5, label %for.body, label %for.end\l}"];
	Node0x2036d30 -> Node0x2002100;
	Node0x2036d30 -> Node0x2029860;
	Node0x2002100 [shape=record,label="{for.body:                                         \l  br label %for.inc\l}"];
	Node0x2002100 -> Node0x2012710;
	Node0x2012710 [shape=record,label="{for.inc:                                          \l  %6 = load i32, i32* %i, align 4\l  %dec = add nsw i32 %6, -1\l  store i32 %dec, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x2012710 -> Node0x204fbb0[constraint=false];
	Node0x2029860 [shape=record,label="{for.end:                                          \l  %7 = load i8*, i8** %zName.addr, align 8\l  %8 = load i32, i32* %i, align 4\l  %add = add nsw i32 %8, 1\l  %idxprom3 = sext i32 %add to i64\l  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 %idxprom3\l  store i8* %arrayidx4, i8** %z, align 8\l  %9 = load i32, i32* %nName.addr, align 4\l  %10 = load i32, i32* %i, align 4\l  %sub5 = sub nsw i32 %9, %10\l  store i32 %sub5, i32* %len, align 4\l  %11 = load i32, i32* %len, align 4\l  %cmp6 = icmp slt i32 %11, 19\l  br i1 %cmp6, label %if.then, label %if.end40\l}"];
	Node0x2029860 -> Node0x1fe24d0;
	Node0x2029860 -> Node0x1fd8390;
	Node0x1fe24d0 [shape=record,label="{if.then:                                          \l  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %zSuffix, i64 0,\l... i64 0\l  %12 = load i8*, i8** %z, align 8\l  %call = call i8* @strcpy(i8* %arraydecay, i8* %12) #7\l  store i32 0, i32* %i, align 4\l  br label %for.cond8\l}"];
	Node0x1fe24d0 -> Node0x1fece30;
	Node0x1fece30 [shape=record,label="{for.cond8:                                        \l  %13 = load i32, i32* %i, align 4\l  %idxprom9 = sext i32 %13 to i64\l  %arrayidx10 = getelementptr inbounds [20 x i8], [20 x i8]* %zSuffix, i64 0,\l... i64 %idxprom9\l  %14 = load i8, i8* %arrayidx10, align 1\l  %tobool = icmp ne i8 %14, 0\l  br i1 %tobool, label %for.body11, label %for.end20\l}"];
	Node0x1fece30 -> Node0x2046a00;
	Node0x1fece30 -> Node0x20308a0;
	Node0x2046a00 [shape=record,label="{for.body11:                                       \l  %15 = load i32, i32* %i, align 4\l  %idxprom12 = sext i32 %15 to i64\l  %arrayidx13 = getelementptr inbounds [20 x i8], [20 x i8]* %zSuffix, i64 0,\l... i64 %idxprom12\l  %16 = load i8, i8* %arrayidx13, align 1\l  %conv14 = sext i8 %16 to i32\l  %call15 = call i32 @tolower(i32 %conv14) #8\l  %conv16 = trunc i32 %call15 to i8\l  %17 = load i32, i32* %i, align 4\l  %idxprom17 = sext i32 %17 to i64\l  %arrayidx18 = getelementptr inbounds [20 x i8], [20 x i8]* %zSuffix, i64 0,\l... i64 %idxprom17\l  store i8 %conv16, i8* %arrayidx18, align 1\l  br label %for.inc19\l}"];
	Node0x2046a00 -> Node0x1fdafc0;
	Node0x1fdafc0 [shape=record,label="{for.inc19:                                        \l  %18 = load i32, i32* %i, align 4\l  %inc = add nsw i32 %18, 1\l  store i32 %inc, i32* %i, align 4\l  br label %for.cond8\l}"];
	Node0x1fdafc0 -> Node0x1fece30[constraint=false];
	Node0x20308a0 [shape=record,label="{for.end20:                                        \l  store i32 0, i32* %first, align 4\l  store i32 191, i32* %last, align 4\l  br label %while.cond\l}"];
	Node0x20308a0 -> Node0x1ff9ba0;
	Node0x1ff9ba0 [shape=record,label="{while.cond:                                       \l  %19 = load i32, i32* %first, align 4\l  %20 = load i32, i32* %last, align 4\l  %cmp21 = icmp sle i32 %19, %20\l  br i1 %cmp21, label %while.body, label %while.end\l}"];
	Node0x1ff9ba0 -> Node0x2012a50;
	Node0x1ff9ba0 -> Node0x1fe0050;
	Node0x2012a50 [shape=record,label="{while.body:                                       \l  %21 = load i32, i32* %first, align 4\l  %22 = load i32, i32* %last, align 4\l  %add23 = add nsw i32 %21, %22\l  %div = sdiv i32 %add23, 2\l  store i32 %div, i32* %i, align 4\l  %arraydecay24 = getelementptr inbounds [20 x i8], [20 x i8]* %zSuffix, i64\l... 0, i64 0\l  %23 = load i32, i32* %i, align 4\l  %idxprom25 = sext i32 %23 to i64\l  %arrayidx26 = getelementptr inbounds [191 x %struct.anon], [191 x\l... %struct.anon]* @GetMimeType.aMime, i64 0, i64 %idxprom25\l  %zSuffix27 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx26,\l... i32 0, i32 0\l  %24 = load i8*, i8** %zSuffix27, align 8\l  %call28 = call i32 @strcmp(i8* %arraydecay24, i8* %24) #8\l  store i32 %call28, i32* %c, align 4\l  %25 = load i32, i32* %c, align 4\l  %cmp29 = icmp eq i32 %25, 0\l  br i1 %cmp29, label %if.then31, label %if.end\l}"];
	Node0x2012a50 -> Node0x202ee80;
	Node0x2012a50 -> Node0x1fdc100;
	Node0x202ee80 [shape=record,label="{if.then31:                                        \l  %26 = load i32, i32* %i, align 4\l  %idxprom32 = sext i32 %26 to i64\l  %arrayidx33 = getelementptr inbounds [191 x %struct.anon], [191 x\l... %struct.anon]* @GetMimeType.aMime, i64 0, i64 %idxprom32\l  %zMimetype = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx33,\l... i32 0, i32 2\l  %27 = load i8*, i8** %zMimetype, align 8\l  store i8* %27, i8** %retval, align 8\l  br label %return\l}"];
	Node0x202ee80 -> Node0x203e860;
	Node0x203e860 [shape=record,label="{return:                                           \l  %31 = load i8*, i8** %retval, align 8\l  ret i8* %31\l}"];
	Node0x1fdc100 [shape=record,label="{if.end:                                           \l  %28 = load i32, i32* %c, align 4\l  %cmp34 = icmp slt i32 %28, 0\l  br i1 %cmp34, label %if.then36, label %if.else\l}"];
	Node0x1fdc100 -> Node0x1fda3e0;
	Node0x1fdc100 -> Node0x1fed210;
	Node0x1fda3e0 [shape=record,label="{if.then36:                                        \l  %29 = load i32, i32* %i, align 4\l  %sub37 = sub nsw i32 %29, 1\l  store i32 %sub37, i32* %last, align 4\l  br label %if.end39\l}"];
	Node0x1fda3e0 -> Node0x1ff1ab0;
	Node0x1ff1ab0 [shape=record,label="{if.end39:                                         \l  br label %while.cond\l}"];
	Node0x1ff1ab0 -> Node0x1ff9ba0;
	Node0x1fed210 [shape=record,label="{if.else:                                          \l  %30 = load i32, i32* %i, align 4\l  %add38 = add nsw i32 %30, 1\l  store i32 %add38, i32* %first, align 4\l  br label %if.end39\l}"];
	Node0x1fed210 -> Node0x1ff1ab0;
	Node0x1fe0050 [shape=record,label="{while.end:                                        \l  br label %if.end40\l}"];
	Node0x1fe0050 -> Node0x1fd8390;
	Node0x1fd8390 [shape=record,label="{if.end40:                                         \l  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.38, i64 0, i64\l... 0), i8** %retval, align 8\l  br label %return\l}"];
	Node0x1fd8390 -> Node0x203e860;
	colorscheme = "paired12"
        subgraph cluster_0x20a1b80 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x20e1bd0 {
            label = "Condition in BB 'land.end' neither constant nor an icmp instruction";
            style = solid;
            color = 6
            subgraph cluster_0x1fd3610 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x204fbb0;
              Node0x2033a30;
            }
            Node0x2036d30;
            Node0x2002100;
            Node0x2012710;
          }
          subgraph cluster_0x2050800 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.cond8";
            style = solid;
            color = 6
            subgraph cluster_0x1fd3690 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: for.cond8";
              style = solid;
              color = 5
              Node0x1fece30;
              Node0x2046a00;
              Node0x1fdafc0;
            }
            subgraph cluster_0x2008830 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x1fdc100;
              Node0x1fda3e0;
              Node0x1fed210;
            }
            Node0x2029860;
            Node0x1fe24d0;
            Node0x20308a0;
            Node0x1ff9ba0;
            Node0x2012a50;
            Node0x202ee80;
            Node0x1ff1ab0;
            Node0x1fe0050;
            Node0x1fd8390;
          }
          Node0x1fe3750;
          Node0x203e860;
        }
}
