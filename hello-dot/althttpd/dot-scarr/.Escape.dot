digraph "CFG for 'Escape' function" {
	label="CFG for 'Escape' function";

	Node0x562a7204f620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{\"0x562a7204f620\":\l  %1 = alloca i8*, align 8\l  %2 = alloca i8*, align 8\l  %3 = alloca i64, align 8\l  %4 = alloca i64, align 8\l  %5 = alloca i64, align 8\l  %6 = alloca i8, align 1\l  %7 = alloca i8*, align 8\l  store i8* %0, i8** %2, align 8\l  store i64 0, i64* %3, align 8\l  br label %\"0x562a72050350 - Virtual Checkpoint\"\l}"];
	Node0x562a7204f620 -> Node0x562a7204f7f0;
	Node0x562a7204f7f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a72050350 - Virtual Checkpoint\":            \l  %8 = load i8*, i8** %2, align 8\l  %9 = load i64, i64* %3, align 8\l  %10 = getelementptr inbounds i8, i8* %8, i64 %9\l  %11 = load i8, i8* %10, align 1\l  store i8 %11, i8* %6, align 1\l  %12 = sext i8 %11 to i32\l  %13 = icmp ne i32 %12, 0\l  br i1 %13, label %\"0x562a7204ff10\", label %\"0x562a7204ff60\"\l|{<s0>T|<s1>F}}"];
	Node0x562a7204f7f0:s0 -> Node0x562a7204ff10;
	Node0x562a7204f7f0:s1 -> Node0x562a7204ff60;
	Node0x562a7204ff10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x562a7204ff10\":                                 \l  %14 = load i8, i8* %6, align 1\l  %15 = sext i8 %14 to i32\l  %16 = icmp ne i32 %15, 34\l  br label %\"0x562a7204ff60\"\l}"];
	Node0x562a7204ff10 -> Node0x562a7204ff60;
	Node0x562a7204ff60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a7204ff60\":                                 \l  %17 = phi i1 [ false, %\"0x562a72050350 - Virtual Checkpoint\" ], [ %16,\l... %\"0x562a7204ff10\" ]\l  br i1 %17, label %\"0x562a72050200\", label %\"0x562a72050250\"\l|{<s0>T|<s1>F}}"];
	Node0x562a7204ff60:s0 -> Node0x562a72050200;
	Node0x562a7204ff60:s1 -> Node0x562a72050250;
	Node0x562a72050200 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a72050200\":                                 \l  br label %\"0x562a72050350\"\l}"];
	Node0x562a72050200 -> Node0x562a72050350;
	Node0x562a72050350 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a72050350\":                                 \l  %18 = load i64, i64* %3, align 8\l  %19 = add i64 %18, 1\l  store i64 %19, i64* %3, align 8\l  br label %\"0x562a72050350 - Virtual Checkpoint\"\l}"];
	Node0x562a72050350 -> Node0x562a7204f7f0;
	Node0x562a72050250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{\"0x562a72050250\":                                 \l  %20 = load i8, i8* %6, align 1\l  %21 = sext i8 %20 to i32\l  %22 = icmp eq i32 %21, 0\l  br i1 %22, label %\"0x562a72050780\", label %\"0x562a720507d0\"\l|{<s0>T|<s1>F}}"];
	Node0x562a72050250:s0 -> Node0x562a72050780;
	Node0x562a72050250:s1 -> Node0x562a720507d0;
	Node0x562a72050780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{\"0x562a72050780\":                                 \l  %23 = load i8*, i8** %2, align 8\l  store i8* %23, i8** %1, align 8\l  br label %\"0x562a720509d0\"\l}"];
	Node0x562a72050780 -> Node0x562a720509d0;
	Node0x562a720507d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{\"0x562a720507d0\":                                 \l  store i64 1, i64* %5, align 8\l  %24 = load i64, i64* %3, align 8\l  %25 = add i64 %24, 1\l  store i64 %25, i64* %3, align 8\l  br label %\"0x562a72051700 - Virtual Checkpoint\"\l}"];
	Node0x562a720507d0 -> Node0x562a72050cb0;
	Node0x562a72050cb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x562a72051700 - Virtual Checkpoint\":            \l  %26 = load i8*, i8** %2, align 8\l  %27 = load i64, i64* %3, align 8\l  %28 = getelementptr inbounds i8, i8* %26, i64 %27\l  %29 = load i8, i8* %28, align 1\l  store i8 %29, i8* %6, align 1\l  %30 = sext i8 %29 to i32\l  %31 = icmp ne i32 %30, 0\l  br i1 %31, label %\"0x562a720510f0\", label %\"0x562a72051140 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x562a72050cb0:s0 -> Node0x562a720510f0;
	Node0x562a72050cb0:s1 -> Node0x562a72051140;
	Node0x562a720510f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x562a720510f0\":                                 \l  %32 = load i8, i8* %6, align 1\l  %33 = sext i8 %32 to i32\l  %34 = icmp eq i32 %33, 34\l  br i1 %34, label %\"0x562a720513b0\", label %\"0x562a72051400\"\l|{<s0>T|<s1>F}}"];
	Node0x562a720510f0:s0 -> Node0x562a720513b0;
	Node0x562a720510f0:s1 -> Node0x562a72051400;
	Node0x562a720513b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{\"0x562a720513b0\":                                 \l  %35 = load i64, i64* %5, align 8\l  %36 = add i64 %35, 1\l  store i64 %36, i64* %5, align 8\l  br label %\"0x562a72051400\"\l}"];
	Node0x562a720513b0 -> Node0x562a72051400;
	Node0x562a72051400 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x562a72051400\":                                 \l  br label %\"0x562a72051700\"\l}"];
	Node0x562a72051400 -> Node0x562a72051700;
	Node0x562a72051700 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x562a72051700\":                                 \l  %37 = load i64, i64* %3, align 8\l  %38 = add i64 %37, 1\l  store i64 %38, i64* %3, align 8\l  br label %\"0x562a72051700 - Virtual Checkpoint\"\l}"];
	Node0x562a72051700 -> Node0x562a72050cb0;
	Node0x562a72051140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{\"0x562a72051140 - Exit Point\":                    \l  %39 = load i64, i64* %3, align 8\l  %40 = load i64, i64* %5, align 8\l  %41 = add i64 %39, %40\l  %42 = add i64 %41, 1\l  %43 = call noalias i8* @malloc(i64 %42)\l  store i8* %43, i8** %7, align 8\l  %44 = load i8*, i8** %7, align 8\l  %45 = icmp eq i8* %44, null\l  br i1 %45, label %\"0x562a72051e40\", label %\"0x562a72051e90\"\l|{<s0>T|<s1>F}}"];
	Node0x562a72051140:s0 -> Node0x562a72051e40;
	Node0x562a72051140:s1 -> Node0x562a72051e90;
	Node0x562a72051e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{\"0x562a72051e40\":                                 \l  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.379, i64 0, i64\l... 0), i8** %1, align 8\l  br label %\"0x562a720509d0\"\l}"];
	Node0x562a72051e40 -> Node0x562a720509d0;
	Node0x562a72051e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{\"0x562a72051e90\":                                 \l  store i64 0, i64* %4, align 8\l  store i64 0, i64* %3, align 8\l  br label %\"0x562a720531b0 - Virtual Checkpoint\"\l}"];
	Node0x562a72051e90 -> Node0x562a720521b0;
	Node0x562a720521b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{\"0x562a720531b0 - Virtual Checkpoint\":            \l  %46 = load i8*, i8** %2, align 8\l  %47 = load i64, i64* %3, align 8\l  %48 = getelementptr inbounds i8, i8* %46, i64 %47\l  %49 = load i8, i8* %48, align 1\l  store i8 %49, i8* %6, align 1\l  %50 = sext i8 %49 to i32\l  %51 = icmp ne i32 %50, 0\l  br i1 %51, label %\"0x562a720525f0\", label %\"0x562a72052640\"\l|{<s0>T|<s1>F}}"];
	Node0x562a720521b0:s0 -> Node0x562a720525f0;
	Node0x562a720521b0:s1 -> Node0x562a72052640;
	Node0x562a720525f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{\"0x562a720525f0\":                                 \l  %52 = load i8, i8* %6, align 1\l  %53 = load i8*, i8** %7, align 8\l  %54 = load i64, i64* %4, align 8\l  %55 = add i64 %54, 1\l  store i64 %55, i64* %4, align 8\l  %56 = getelementptr inbounds i8, i8* %53, i64 %54\l  store i8 %52, i8* %56, align 1\l  %57 = load i8, i8* %6, align 1\l  %58 = sext i8 %57 to i32\l  %59 = icmp eq i32 %58, 34\l  br i1 %59, label %\"0x562a72052c50\", label %\"0x562a72052ca0\"\l|{<s0>T|<s1>F}}"];
	Node0x562a720525f0:s0 -> Node0x562a72052c50;
	Node0x562a720525f0:s1 -> Node0x562a72052ca0;
	Node0x562a72052c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{\"0x562a72052c50\":                                 \l  %60 = load i8, i8* %6, align 1\l  %61 = load i8*, i8** %7, align 8\l  %62 = load i64, i64* %4, align 8\l  %63 = add i64 %62, 1\l  store i64 %63, i64* %4, align 8\l  %64 = getelementptr inbounds i8, i8* %61, i64 %62\l  store i8 %60, i8* %64, align 1\l  br label %\"0x562a72052ca0\"\l}"];
	Node0x562a72052c50 -> Node0x562a72052ca0;
	Node0x562a72052ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{\"0x562a72052ca0\":                                 \l  br label %\"0x562a720531b0\"\l}"];
	Node0x562a72052ca0 -> Node0x562a720531b0;
	Node0x562a720531b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{\"0x562a720531b0\":                                 \l  %65 = load i64, i64* %3, align 8\l  %66 = add i64 %65, 1\l  store i64 %66, i64* %3, align 8\l  br label %\"0x562a720531b0 - Virtual Checkpoint\"\l}"];
	Node0x562a720531b0 -> Node0x562a720521b0;
	Node0x562a72052640 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{\"0x562a72052640\":                                 \l  %67 = load i8*, i8** %7, align 8\l  %68 = load i64, i64* %4, align 8\l  %69 = getelementptr inbounds i8, i8* %67, i64 %68\l  store i8 0, i8* %69, align 1\l  %70 = load i8*, i8** %7, align 8\l  store i8* %70, i8** %1, align 8\l  br label %\"0x562a720509d0\"\l}"];
	Node0x562a72052640 -> Node0x562a720509d0;
	Node0x562a720509d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{\"0x562a720509d0\":                                 \l  %71 = load i8*, i8** %1, align 8\l  ret i8* %71\l}"];
}
