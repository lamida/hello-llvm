digraph "CFG for 'xferBytes' function" {
	label="CFG for 'xferBytes' function";

	Node0x562a72054bd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{\"0x562a72054bd0\":\l  %4 = alloca %struct._IO_FILE*, align 8\l  %5 = alloca %struct._IO_FILE*, align 8\l  %6 = alloca i32, align 4\l  %7 = alloca i32, align 4\l  %8 = alloca i64, align 8\l  %9 = alloca i64, align 8\l  %10 = alloca [16384 x i8], align 16\l  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 8\l  store %struct._IO_FILE* %1, %struct._IO_FILE** %5, align 8\l  store i32 %2, i32* %6, align 4\l  store i32 %3, i32* %7, align 4\l  br label %\"0x562a72055e40 - Virtual Checkpoint\"\l}"];
	Node0x562a72054bd0 -> Node0x562a72054c20;
	Node0x562a72054c20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a72055e40 - Virtual Checkpoint\":            \l  %11 = load i32, i32* %7, align 4\l  %12 = icmp sgt i32 %11, 0\l  br i1 %12, label %\"0x562a720553c0\", label %\"0x562a72055410\"\l|{<s0>T|<s1>F}}"];
	Node0x562a72054c20:s0 -> Node0x562a720553c0;
	Node0x562a72054c20:s1 -> Node0x562a72055410;
	Node0x562a720553c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{\"0x562a720553c0\":                                 \l  %13 = load i32, i32* %7, align 4\l  %14 = sext i32 %13 to i64\l  store i64 %14, i64* %8, align 8\l  %15 = load i64, i64* %8, align 8\l  %16 = icmp ugt i64 %15, 16384\l  br i1 %16, label %\"0x562a720556f0\", label %\"0x562a72055740 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x562a720553c0:s0 -> Node0x562a720556f0;
	Node0x562a720553c0:s1 -> Node0x562a72055740;
	Node0x562a720556f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{\"0x562a720556f0\":                                 \l  store i64 16384, i64* %8, align 8\l  br label %\"0x562a72055740 - Exit Point\"\l}"];
	Node0x562a720556f0 -> Node0x562a72055740;
	Node0x562a72055740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{\"0x562a72055740 - Exit Point\":                    \l  %17 = getelementptr inbounds [16384 x i8], [16384 x i8]* %10, i64 0, i64 0\l  %18 = load i64, i64* %8, align 8\l  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8\l  %20 = call i64 @fread(i8* %17, i64 1, i64 %18, %struct._IO_FILE* %19)\l  store i64 %20, i64* %9, align 8\l  %21 = load i64, i64* %9, align 8\l  %22 = icmp eq i64 %21, 0\l  br i1 %22, label %\"0x562a72055df0\", label %\"0x562a72055e40\"\l|{<s0>T|<s1>F}}"];
	Node0x562a72055740:s0 -> Node0x562a72055df0;
	Node0x562a72055740:s1 -> Node0x562a72055e40;
	Node0x562a72055df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{\"0x562a72055df0\":                                 \l  br label %\"0x562a72055410\"\l}"];
	Node0x562a72055df0 -> Node0x562a72055410;
	Node0x562a72055e40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{\"0x562a72055e40\":                                 \l  %23 = load i64, i64* %9, align 8\l  %24 = load i32, i32* %7, align 4\l  %25 = sext i32 %24 to i64\l  %26 = sub i64 %25, %23\l  %27 = trunc i64 %26 to i32\l  store i32 %27, i32* %7, align 4\l  br label %\"0x562a72055e40 - Virtual Checkpoint\"\l}"];
	Node0x562a72055e40 -> Node0x562a72054c20;
	Node0x562a72055410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{\"0x562a72055410\":                                 \l  br label %\"0x562a72056fa0 - Virtual Checkpoint\"\l}"];
	Node0x562a72055410 -> Node0x562a72056300;
	Node0x562a72056300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x562a72056fa0 - Virtual Checkpoint\":            \l  %28 = load i32, i32* %6, align 4\l  %29 = icmp sgt i32 %28, 0\l  br i1 %29, label %\"0x562a720564c0\", label %\"0x562a72056510\"\l|{<s0>T|<s1>F}}"];
	Node0x562a72056300:s0 -> Node0x562a720564c0;
	Node0x562a72056300:s1 -> Node0x562a72056510;
	Node0x562a720564c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{\"0x562a720564c0\":                                 \l  %30 = load i32, i32* %6, align 4\l  %31 = sext i32 %30 to i64\l  store i64 %31, i64* %8, align 8\l  %32 = load i64, i64* %8, align 8\l  %33 = icmp ugt i64 %32, 16384\l  br i1 %33, label %\"0x562a72056880\", label %\"0x562a720568d0 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x562a720564c0:s0 -> Node0x562a72056880;
	Node0x562a720564c0:s1 -> Node0x562a720568d0;
	Node0x562a72056880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{\"0x562a72056880\":                                 \l  store i64 16384, i64* %8, align 8\l  br label %\"0x562a720568d0 - Exit Point\"\l}"];
	Node0x562a72056880 -> Node0x562a720568d0;
	Node0x562a720568d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{\"0x562a720568d0 - Exit Point\":                    \l  %34 = getelementptr inbounds [16384 x i8], [16384 x i8]* %10, i64 0, i64 0\l  %35 = load i64, i64* %8, align 8\l  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8\l  %37 = call i64 @fread(i8* %34, i64 1, i64 %35, %struct._IO_FILE* %36)\l  store i64 %37, i64* %9, align 8\l  %38 = load i64, i64* %9, align 8\l  %39 = icmp eq i64 %38, 0\l  br i1 %39, label %\"0x562a72056f50\", label %\"0x562a72056fa0 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x562a720568d0:s0 -> Node0x562a72056f50;
	Node0x562a720568d0:s1 -> Node0x562a72056fa0;
	Node0x562a72056f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{\"0x562a72056f50\":                                 \l  br label %\"0x562a72056510\"\l}"];
	Node0x562a72056f50 -> Node0x562a72056510;
	Node0x562a72056fa0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{\"0x562a72056fa0 - Exit Point\":                    \l  %40 = getelementptr inbounds [16384 x i8], [16384 x i8]* %10, i64 0, i64 0\l  %41 = load i64, i64* %9, align 8\l  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8\l  %43 = call i64 @fwrite(i8* %40, i64 %41, i64 1, %struct._IO_FILE* %42)\l  %44 = load i64, i64* %9, align 8\l  %45 = load i32, i32* @nOut, align 4\l  %46 = sext i32 %45 to i64\l  %47 = add i64 %46, %44\l  %48 = trunc i64 %47 to i32\l  store i32 %48, i32* @nOut, align 4\l  %49 = load i64, i64* %9, align 8\l  %50 = load i32, i32* %6, align 4\l  %51 = sext i32 %50 to i64\l  %52 = sub i64 %51, %49\l  %53 = trunc i64 %52 to i32\l  store i32 %53, i32* %6, align 4\l  br label %\"0x562a72056fa0 - Virtual Checkpoint\"\l}"];
	Node0x562a72056fa0 -> Node0x562a72056300;
	Node0x562a72056510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dbdcde70",label="{\"0x562a72056510\":                                 \l  ret void\l}"];
}
