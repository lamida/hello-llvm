digraph "CFG for 'Escape' function" {
	label="CFG for 'Escape' function";

	Node0x563217fea5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{\"0x563217fea5a0\":\l  %retval = alloca i8*, align 8\l  %z.addr = alloca i8*, align 8\l  %i = alloca i64, align 8\l  %j = alloca i64, align 8\l  %n = alloca i64, align 8\l  %c = alloca i8, align 1\l  %zOut = alloca i8*, align 8\l  store i8* %z, i8** %z.addr, align 8\l  store i64 0, i64* %i, align 8\l  br label %\"0x563217feb7a0 - Virtual Checkpoint\"\l}"];
	Node0x563217fea5a0 -> Node0x563217feaae0;
	Node0x563217feaae0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563217feb7a0 - Virtual Checkpoint\":            \l  %0 = load i8*, i8** %z.addr, align 8\l  %1 = load i64, i64* %i, align 8\l  %arrayidx = getelementptr inbounds i8, i8* %0, i64 %1\l  %2 = load i8, i8* %arrayidx, align 1\l  store i8 %2, i8* %c, align 1\l  %conv = sext i8 %2 to i32\l  %cmp = icmp ne i32 %conv, 0\l  br i1 %cmp, label %\"0x563217feb190\", label %\"0x563217feb210\"\l|{<s0>T|<s1>F}}"];
	Node0x563217feaae0:s0 -> Node0x563217feb190;
	Node0x563217feaae0:s1 -> Node0x563217feb210;
	Node0x563217feb190 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x563217feb190\":                                 \l  %3 = load i8, i8* %c, align 1\l  %conv2 = sext i8 %3 to i32\l  %cmp3 = icmp ne i32 %conv2, 34\l  br label %\"0x563217feb210\"\l}"];
	Node0x563217feb190 -> Node0x563217feb210;
	Node0x563217feb210 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563217feb210\":                                 \l  %4 = phi i1 [ false, %\"0x563217feb7a0 - Virtual Checkpoint\" ], [ %cmp3,\l... %\"0x563217feb190\" ]\l  br i1 %4, label %\"0x563217feb630\", label %\"0x563217feb680\"\l|{<s0>T|<s1>F}}"];
	Node0x563217feb210:s0 -> Node0x563217feb630;
	Node0x563217feb210:s1 -> Node0x563217feb680;
	Node0x563217feb630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563217feb630\":                                 \l  br label %\"0x563217feb7a0\"\l}"];
	Node0x563217feb630 -> Node0x563217feb7a0;
	Node0x563217feb7a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{\"0x563217feb7a0\":                                 \l  %5 = load i64, i64* %i, align 8\l  %inc = add i64 %5, 1\l  store i64 %inc, i64* %i, align 8\l  br label %\"0x563217feb7a0 - Virtual Checkpoint\"\l}"];
	Node0x563217feb7a0 -> Node0x563217feaae0;
	Node0x563217feb680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{\"0x563217feb680\":                                 \l  %6 = load i8, i8* %c, align 1\l  %conv5 = sext i8 %6 to i32\l  %cmp6 = icmp eq i32 %conv5, 0\l  br i1 %cmp6, label %\"0x563217febc50\", label %\"0x563217febcc0\"\l|{<s0>T|<s1>F}}"];
	Node0x563217feb680:s0 -> Node0x563217febc50;
	Node0x563217feb680:s1 -> Node0x563217febcc0;
	Node0x563217febc50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{\"0x563217febc50\":                                 \l  %7 = load i8*, i8** %z.addr, align 8\l  store i8* %7, i8** %retval, align 8\l  br label %\"0x563217feb110\"\l}"];
	Node0x563217febc50 -> Node0x563217feb110;
	Node0x563217febcc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{\"0x563217febcc0\":                                 \l  store i64 1, i64* %n, align 8\l  %8 = load i64, i64* %i, align 8\l  %inc8 = add i64 %8, 1\l  store i64 %inc8, i64* %i, align 8\l  br label %\"0x563217fecfe0 - Virtual Checkpoint\"\l}"];
	Node0x563217febcc0 -> Node0x563217feb5e0;
	Node0x563217feb5e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x563217fecfe0 - Virtual Checkpoint\":            \l  %9 = load i8*, i8** %z.addr, align 8\l  %10 = load i64, i64* %i, align 8\l  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 %10\l  %11 = load i8, i8* %arrayidx10, align 1\l  store i8 %11, i8* %c, align 1\l  %conv11 = sext i8 %11 to i32\l  %cmp12 = icmp ne i32 %conv11, 0\l  br i1 %cmp12, label %\"0x563217fec8b0\", label %\"0x563217fec930 - Exit Point\"\l|{<s0>T|<s1>F}}"];
	Node0x563217feb5e0:s0 -> Node0x563217fec8b0;
	Node0x563217feb5e0:s1 -> Node0x563217fec930;
	Node0x563217fec8b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x563217fec8b0\":                                 \l  %12 = load i8, i8* %c, align 1\l  %conv15 = sext i8 %12 to i32\l  %cmp16 = icmp eq i32 %conv15, 34\l  br i1 %cmp16, label %\"0x563217fecc10\", label %\"0x563217fecc90\"\l|{<s0>T|<s1>F}}"];
	Node0x563217fec8b0:s0 -> Node0x563217fecc10;
	Node0x563217fec8b0:s1 -> Node0x563217fecc90;
	Node0x563217fecc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{\"0x563217fecc10\":                                 \l  %13 = load i64, i64* %n, align 8\l  %inc19 = add i64 %13, 1\l  store i64 %inc19, i64* %n, align 8\l  br label %\"0x563217fecc90\"\l}"];
	Node0x563217fecc10 -> Node0x563217fecc90;
	Node0x563217fecc90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x563217fecc90\":                                 \l  br label %\"0x563217fecfe0\"\l}"];
	Node0x563217fecc90 -> Node0x563217fecfe0;
	Node0x563217fecfe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{\"0x563217fecfe0\":                                 \l  %14 = load i64, i64* %i, align 8\l  %inc22 = add i64 %14, 1\l  store i64 %inc22, i64* %i, align 8\l  br label %\"0x563217fecfe0 - Virtual Checkpoint\"\l}"];
	Node0x563217fecfe0 -> Node0x563217feb5e0;
	Node0x563217fec930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cbd8ee70",label="{\"0x563217fec930 - Exit Point\":                    \l  %15 = load i64, i64* %i, align 8\l  %16 = load i64, i64* %n, align 8\l  %add = add i64 %15, %16\l  %add24 = add i64 %add, 1\l  %call = call noalias i8* @malloc(i64 %add24)\l  store i8* %call, i8** %zOut, align 8\l  %17 = load i8*, i8** %zOut, align 8\l  %cmp25 = icmp eq i8* %17, null\l  br i1 %cmp25, label %\"0x563217fed780\", label %\"0x563217fed800\"\l|{<s0>T|<s1>F}}"];
	Node0x563217fec930:s0 -> Node0x563217fed780;
	Node0x563217fec930:s1 -> Node0x563217fed800;
	Node0x563217fed780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{\"0x563217fed780\":                                 \l  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.379, i64 0, i64\l... 0), i8** %retval, align 8\l  br label %\"0x563217feb110\"\l}"];
	Node0x563217fed780 -> Node0x563217feb110;
	Node0x563217fed800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{\"0x563217fed800\":                                 \l  store i64 0, i64* %j, align 8\l  store i64 0, i64* %i, align 8\l  br label %\"0x563217f02b50 - Virtual Checkpoint\"\l}"];
	Node0x563217fed800 -> Node0x563217fedb70;
	Node0x563217fedb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{\"0x563217f02b50 - Virtual Checkpoint\":            \l  %18 = load i8*, i8** %z.addr, align 8\l  %19 = load i64, i64* %i, align 8\l  %arrayidx30 = getelementptr inbounds i8, i8* %18, i64 %19\l  %20 = load i8, i8* %arrayidx30, align 1\l  store i8 %20, i8* %c, align 1\l  %conv31 = sext i8 %20 to i32\l  %cmp32 = icmp ne i32 %conv31, 0\l  br i1 %cmp32, label %\"0x563217febde0\", label %\"0x563217febe60\"\l|{<s0>T|<s1>F}}"];
	Node0x563217fedb70:s0 -> Node0x563217febde0;
	Node0x563217fedb70:s1 -> Node0x563217febe60;
	Node0x563217febde0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{\"0x563217febde0\":                                 \l  %21 = load i8, i8* %c, align 1\l  %22 = load i8*, i8** %zOut, align 8\l  %23 = load i64, i64* %j, align 8\l  %inc35 = add i64 %23, 1\l  store i64 %inc35, i64* %j, align 8\l  %arrayidx36 = getelementptr inbounds i8, i8* %22, i64 %23\l  store i8 %21, i8* %arrayidx36, align 1\l  %24 = load i8, i8* %c, align 1\l  %conv37 = sext i8 %24 to i32\l  %cmp38 = icmp eq i32 %conv37, 34\l  br i1 %cmp38, label %\"0x563217f6a290\", label %\"0x563217f69a10\"\l|{<s0>T|<s1>F}}"];
	Node0x563217febde0:s0 -> Node0x563217f6a290;
	Node0x563217febde0:s1 -> Node0x563217f69a10;
	Node0x563217f6a290 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4987a70",label="{\"0x563217f6a290\":                                 \l  %25 = load i8, i8* %c, align 1\l  %26 = load i8*, i8** %zOut, align 8\l  %27 = load i64, i64* %j, align 8\l  %inc41 = add i64 %27, 1\l  store i64 %inc41, i64* %j, align 8\l  %arrayidx42 = getelementptr inbounds i8, i8* %26, i64 %27\l  store i8 %25, i8* %arrayidx42, align 1\l  br label %\"0x563217f69a10\"\l}"];
	Node0x563217f6a290 -> Node0x563217f69a10;
	Node0x563217f69a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{\"0x563217f69a10\":                                 \l  br label %\"0x563217f02b50\"\l}"];
	Node0x563217f69a10 -> Node0x563217f02b50;
	Node0x563217f02b50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{\"0x563217f02b50\":                                 \l  %28 = load i64, i64* %i, align 8\l  %inc45 = add i64 %28, 1\l  store i64 %inc45, i64* %i, align 8\l  br label %\"0x563217f02b50 - Virtual Checkpoint\"\l}"];
	Node0x563217f02b50 -> Node0x563217fedb70;
	Node0x563217febe60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{\"0x563217febe60\":                                 \l  %29 = load i8*, i8** %zOut, align 8\l  %30 = load i64, i64* %j, align 8\l  %arrayidx47 = getelementptr inbounds i8, i8* %29, i64 %30\l  store i8 0, i8* %arrayidx47, align 1\l  %31 = load i8*, i8** %zOut, align 8\l  store i8* %31, i8** %retval, align 8\l  br label %\"0x563217feb110\"\l}"];
	Node0x563217febe60 -> Node0x563217feb110;
	Node0x563217feb110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{\"0x563217feb110\":                                 \l  %32 = load i8*, i8** %retval, align 8\l  ret i8* %32\l}"];
}
