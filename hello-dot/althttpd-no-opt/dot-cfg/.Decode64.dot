digraph "CFG for 'Decode64' function" {
	label="CFG for 'Decode64' function";

	Node0xb635d0 [shape=record,label="{entry:\l  %z64.addr = alloca i8*, align 8\l  %zData = alloca i8*, align 8\l  %n64 = alloca i32, align 4\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %a = alloca i32, align 4\l  %b = alloca i32, align 4\l  %c = alloca i32, align 4\l  %d = alloca i32, align 4\l  store i8* %z64, i8** %z64.addr, align 8\l  %0 = load i32, i32* @Decode64.isInit, align 4\l  %tobool = icmp ne i32 %0, 0\l  br i1 %tobool, label %if.end, label %if.then\l|{<s0>T|<s1>F}}"];
	Node0xb635d0:s0 -> Node0xb63bf0;
	Node0xb635d0:s1 -> Node0xb63530;
	Node0xb63530 [shape=record,label="{if.then:                                          \l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0xb63530 -> Node0xb63ef0;
	Node0xb63ef0 [shape=record,label="{for.cond:                                         \l  %1 = load i32, i32* %i, align 4\l  %cmp = icmp slt i32 %1, 128\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0xb63ef0:s0 -> Node0xb999f0;
	Node0xb63ef0:s1 -> Node0xb99ad0;
	Node0xb999f0 [shape=record,label="{for.body:                                         \l  %2 = load i32, i32* %i, align 4\l  %idxprom = sext i32 %2 to i64\l  %arrayidx = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom\l  store i32 0, i32* %arrayidx, align 4\l  br label %for.inc\l}"];
	Node0xb999f0 -> Node0xb99e10;
	Node0xb99e10 [shape=record,label="{for.inc:                                          \l  %3 = load i32, i32* %i, align 4\l  %inc = add nsw i32 %3, 1\l  store i32 %inc, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0xb99e10 -> Node0xb63ef0;
	Node0xb99ad0 [shape=record,label="{for.end:                                          \l  store i32 0, i32* %i, align 4\l  br label %for.cond1\l}"];
	Node0xb99ad0 -> Node0xb9a130;
	Node0xb9a130 [shape=record,label="{for.cond1:                                        \l  %4 = load i32, i32* %i, align 4\l  %idxprom2 = sext i32 %4 to i64\l  %arrayidx3 = getelementptr inbounds [65 x i8], [65 x i8]* @Decode64.zBase,\l... i64 0, i64 %idxprom2\l  %5 = load i8, i8* %arrayidx3, align 1\l  %tobool4 = icmp ne i8 %5, 0\l  br i1 %tobool4, label %for.body5, label %for.end12\l|{<s0>T|<s1>F}}"];
	Node0xb9a130:s0 -> Node0xb63d80;
	Node0xb9a130:s1 -> Node0xb9a710;
	Node0xb63d80 [shape=record,label="{for.body5:                                        \l  %6 = load i32, i32* %i, align 4\l  %7 = load i32, i32* %i, align 4\l  %idxprom6 = sext i32 %7 to i64\l  %arrayidx7 = getelementptr inbounds [65 x i8], [65 x i8]* @Decode64.zBase,\l... i64 0, i64 %idxprom6\l  %8 = load i8, i8* %arrayidx7, align 1\l  %conv = zext i8 %8 to i32\l  %and = and i32 %conv, 127\l  %idxprom8 = sext i32 %and to i64\l  %arrayidx9 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom8\l  store i32 %6, i32* %arrayidx9, align 4\l  br label %for.inc10\l}"];
	Node0xb63d80 -> Node0xb9a210;
	Node0xb9a210 [shape=record,label="{for.inc10:                                        \l  %9 = load i32, i32* %i, align 4\l  %inc11 = add nsw i32 %9, 1\l  store i32 %inc11, i32* %i, align 4\l  br label %for.cond1\l}"];
	Node0xb9a210 -> Node0xb9a130;
	Node0xb9a710 [shape=record,label="{for.end12:                                        \l  store i32 1, i32* @Decode64.isInit, align 4\l  br label %if.end\l}"];
	Node0xb9a710 -> Node0xb63bf0;
	Node0xb63bf0 [shape=record,label="{if.end:                                           \l  %10 = load i8*, i8** %z64.addr, align 8\l  %call = call i64 @strlen(i8* %10) #8\l  %conv13 = trunc i64 %call to i32\l  store i32 %conv13, i32* %n64, align 4\l  br label %while.cond\l}"];
	Node0xb63bf0 -> Node0xb7acf0;
	Node0xb7acf0 [shape=record,label="{while.cond:                                       \l  %11 = load i32, i32* %n64, align 4\l  %cmp14 = icmp sgt i32 %11, 0\l  br i1 %cmp14, label %land.rhs, label %land.end\l|{<s0>T|<s1>F}}"];
	Node0xb7acf0:s0 -> Node0xb7aec0;
	Node0xb7acf0:s1 -> Node0xb7afa0;
	Node0xb7aec0 [shape=record,label="{land.rhs:                                         \l  %12 = load i8*, i8** %z64.addr, align 8\l  %13 = load i32, i32* %n64, align 4\l  %sub = sub nsw i32 %13, 1\l  %idxprom16 = sext i32 %sub to i64\l  %arrayidx17 = getelementptr inbounds i8, i8* %12, i64 %idxprom16\l  %14 = load i8, i8* %arrayidx17, align 1\l  %conv18 = sext i8 %14 to i32\l  %cmp19 = icmp eq i32 %conv18, 61\l  br label %land.end\l}"];
	Node0xb7aec0 -> Node0xb7afa0;
	Node0xb7afa0 [shape=record,label="{land.end:                                         \l  %15 = phi i1 [ false, %while.cond ], [ %cmp19, %land.rhs ]\l  br i1 %15, label %while.body, label %while.end\l|{<s0>T|<s1>F}}"];
	Node0xb7afa0:s0 -> Node0xb7b5e0;
	Node0xb7afa0:s1 -> Node0xb7b660;
	Node0xb7b5e0 [shape=record,label="{while.body:                                       \l  %16 = load i32, i32* %n64, align 4\l  %dec = add nsw i32 %16, -1\l  store i32 %dec, i32* %n64, align 4\l  br label %while.cond\l}"];
	Node0xb7b5e0 -> Node0xb7acf0;
	Node0xb7b660 [shape=record,label="{while.end:                                        \l  %17 = load i8*, i8** %z64.addr, align 8\l  store i8* %17, i8** %zData, align 8\l  store i32 0, i32* %j, align 4\l  store i32 0, i32* %i, align 4\l  br label %for.cond21\l}"];
	Node0xb7b660 -> Node0xb7c110;
	Node0xb7c110 [shape=record,label="{for.cond21:                                       \l  %18 = load i32, i32* %i, align 4\l  %add = add nsw i32 %18, 3\l  %19 = load i32, i32* %n64, align 4\l  %cmp22 = icmp slt i32 %add, %19\l  br i1 %cmp22, label %for.body24, label %for.end77\l|{<s0>T|<s1>F}}"];
	Node0xb7c110:s0 -> Node0xb7c3d0;
	Node0xb7c110:s1 -> Node0xb7c4b0;
	Node0xb7c3d0 [shape=record,label="{for.body24:                                       \l  %20 = load i8*, i8** %z64.addr, align 8\l  %21 = load i32, i32* %i, align 4\l  %idxprom25 = sext i32 %21 to i64\l  %arrayidx26 = getelementptr inbounds i8, i8* %20, i64 %idxprom25\l  %22 = load i8, i8* %arrayidx26, align 1\l  %conv27 = sext i8 %22 to i32\l  %and28 = and i32 %conv27, 127\l  %idxprom29 = sext i32 %and28 to i64\l  %arrayidx30 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom29\l  %23 = load i32, i32* %arrayidx30, align 4\l  store i32 %23, i32* %a, align 4\l  %24 = load i8*, i8** %z64.addr, align 8\l  %25 = load i32, i32* %i, align 4\l  %add31 = add nsw i32 %25, 1\l  %idxprom32 = sext i32 %add31 to i64\l  %arrayidx33 = getelementptr inbounds i8, i8* %24, i64 %idxprom32\l  %26 = load i8, i8* %arrayidx33, align 1\l  %conv34 = sext i8 %26 to i32\l  %and35 = and i32 %conv34, 127\l  %idxprom36 = sext i32 %and35 to i64\l  %arrayidx37 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom36\l  %27 = load i32, i32* %arrayidx37, align 4\l  store i32 %27, i32* %b, align 4\l  %28 = load i8*, i8** %z64.addr, align 8\l  %29 = load i32, i32* %i, align 4\l  %add38 = add nsw i32 %29, 2\l  %idxprom39 = sext i32 %add38 to i64\l  %arrayidx40 = getelementptr inbounds i8, i8* %28, i64 %idxprom39\l  %30 = load i8, i8* %arrayidx40, align 1\l  %conv41 = sext i8 %30 to i32\l  %and42 = and i32 %conv41, 127\l  %idxprom43 = sext i32 %and42 to i64\l  %arrayidx44 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom43\l  %31 = load i32, i32* %arrayidx44, align 4\l  store i32 %31, i32* %c, align 4\l  %32 = load i8*, i8** %z64.addr, align 8\l  %33 = load i32, i32* %i, align 4\l  %add45 = add nsw i32 %33, 3\l  %idxprom46 = sext i32 %add45 to i64\l  %arrayidx47 = getelementptr inbounds i8, i8* %32, i64 %idxprom46\l  %34 = load i8, i8* %arrayidx47, align 1\l  %conv48 = sext i8 %34 to i32\l  %and49 = and i32 %conv48, 127\l  %idxprom50 = sext i32 %and49 to i64\l  %arrayidx51 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom50\l  %35 = load i32, i32* %arrayidx51, align 4\l  store i32 %35, i32* %d, align 4\l  %36 = load i32, i32* %a, align 4\l  %shl = shl i32 %36, 2\l  %and52 = and i32 %shl, 252\l  %37 = load i32, i32* %b, align 4\l  %shr = ashr i32 %37, 4\l  %and53 = and i32 %shr, 3\l  %or = or i32 %and52, %and53\l  %conv54 = trunc i32 %or to i8\l  %38 = load i8*, i8** %zData, align 8\l  %39 = load i32, i32* %j, align 4\l  %inc55 = add nsw i32 %39, 1\l  store i32 %inc55, i32* %j, align 4\l  %idxprom56 = sext i32 %39 to i64\l  %arrayidx57 = getelementptr inbounds i8, i8* %38, i64 %idxprom56\l  store i8 %conv54, i8* %arrayidx57, align 1\l  %40 = load i32, i32* %b, align 4\l  %shl58 = shl i32 %40, 4\l  %and59 = and i32 %shl58, 240\l  %41 = load i32, i32* %c, align 4\l  %shr60 = ashr i32 %41, 2\l  %and61 = and i32 %shr60, 15\l  %or62 = or i32 %and59, %and61\l  %conv63 = trunc i32 %or62 to i8\l  %42 = load i8*, i8** %zData, align 8\l  %43 = load i32, i32* %j, align 4\l  %inc64 = add nsw i32 %43, 1\l  store i32 %inc64, i32* %j, align 4\l  %idxprom65 = sext i32 %43 to i64\l  %arrayidx66 = getelementptr inbounds i8, i8* %42, i64 %idxprom65\l  store i8 %conv63, i8* %arrayidx66, align 1\l  %44 = load i32, i32* %c, align 4\l  %shl67 = shl i32 %44, 6\l  %and68 = and i32 %shl67, 192\l  %45 = load i32, i32* %d, align 4\l  %and69 = and i32 %45, 63\l  %or70 = or i32 %and68, %and69\l  %conv71 = trunc i32 %or70 to i8\l  %46 = load i8*, i8** %zData, align 8\l  %47 = load i32, i32* %j, align 4\l  %inc72 = add nsw i32 %47, 1\l  store i32 %inc72, i32* %j, align 4\l  %idxprom73 = sext i32 %47 to i64\l  %arrayidx74 = getelementptr inbounds i8, i8* %46, i64 %idxprom73\l  store i8 %conv71, i8* %arrayidx74, align 1\l  br label %for.inc75\l}"];
	Node0xb7c3d0 -> Node0xb7bcb0;
	Node0xb7bcb0 [shape=record,label="{for.inc75:                                        \l  %48 = load i32, i32* %i, align 4\l  %add76 = add nsw i32 %48, 4\l  store i32 %add76, i32* %i, align 4\l  br label %for.cond21\l}"];
	Node0xb7bcb0 -> Node0xb7c110;
	Node0xb7c4b0 [shape=record,label="{for.end77:                                        \l  %49 = load i32, i32* %i, align 4\l  %add78 = add nsw i32 %49, 2\l  %50 = load i32, i32* %n64, align 4\l  %cmp79 = icmp slt i32 %add78, %50\l  br i1 %cmp79, label %if.then81, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0xb7c4b0:s0 -> Node0xba4ec0;
	Node0xb7c4b0:s1 -> Node0xba4fa0;
	Node0xba4ec0 [shape=record,label="{if.then81:                                        \l  %51 = load i8*, i8** %z64.addr, align 8\l  %52 = load i32, i32* %i, align 4\l  %idxprom82 = sext i32 %52 to i64\l  %arrayidx83 = getelementptr inbounds i8, i8* %51, i64 %idxprom82\l  %53 = load i8, i8* %arrayidx83, align 1\l  %conv84 = sext i8 %53 to i32\l  %and85 = and i32 %conv84, 127\l  %idxprom86 = sext i32 %and85 to i64\l  %arrayidx87 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom86\l  %54 = load i32, i32* %arrayidx87, align 4\l  store i32 %54, i32* %a, align 4\l  %55 = load i8*, i8** %z64.addr, align 8\l  %56 = load i32, i32* %i, align 4\l  %add88 = add nsw i32 %56, 1\l  %idxprom89 = sext i32 %add88 to i64\l  %arrayidx90 = getelementptr inbounds i8, i8* %55, i64 %idxprom89\l  %57 = load i8, i8* %arrayidx90, align 1\l  %conv91 = sext i8 %57 to i32\l  %and92 = and i32 %conv91, 127\l  %idxprom93 = sext i32 %and92 to i64\l  %arrayidx94 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom93\l  %58 = load i32, i32* %arrayidx94, align 4\l  store i32 %58, i32* %b, align 4\l  %59 = load i8*, i8** %z64.addr, align 8\l  %60 = load i32, i32* %i, align 4\l  %add95 = add nsw i32 %60, 2\l  %idxprom96 = sext i32 %add95 to i64\l  %arrayidx97 = getelementptr inbounds i8, i8* %59, i64 %idxprom96\l  %61 = load i8, i8* %arrayidx97, align 1\l  %conv98 = sext i8 %61 to i32\l  %and99 = and i32 %conv98, 127\l  %idxprom100 = sext i32 %and99 to i64\l  %arrayidx101 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom100\l  %62 = load i32, i32* %arrayidx101, align 4\l  store i32 %62, i32* %c, align 4\l  %63 = load i32, i32* %a, align 4\l  %shl102 = shl i32 %63, 2\l  %and103 = and i32 %shl102, 252\l  %64 = load i32, i32* %b, align 4\l  %shr104 = ashr i32 %64, 4\l  %and105 = and i32 %shr104, 3\l  %or106 = or i32 %and103, %and105\l  %conv107 = trunc i32 %or106 to i8\l  %65 = load i8*, i8** %zData, align 8\l  %66 = load i32, i32* %j, align 4\l  %inc108 = add nsw i32 %66, 1\l  store i32 %inc108, i32* %j, align 4\l  %idxprom109 = sext i32 %66 to i64\l  %arrayidx110 = getelementptr inbounds i8, i8* %65, i64 %idxprom109\l  store i8 %conv107, i8* %arrayidx110, align 1\l  %67 = load i32, i32* %b, align 4\l  %shl111 = shl i32 %67, 4\l  %and112 = and i32 %shl111, 240\l  %68 = load i32, i32* %c, align 4\l  %shr113 = ashr i32 %68, 2\l  %and114 = and i32 %shr113, 15\l  %or115 = or i32 %and112, %and114\l  %conv116 = trunc i32 %or115 to i8\l  %69 = load i8*, i8** %zData, align 8\l  %70 = load i32, i32* %j, align 4\l  %inc117 = add nsw i32 %70, 1\l  store i32 %inc117, i32* %j, align 4\l  %idxprom118 = sext i32 %70 to i64\l  %arrayidx119 = getelementptr inbounds i8, i8* %69, i64 %idxprom118\l  store i8 %conv116, i8* %arrayidx119, align 1\l  br label %if.end147\l}"];
	Node0xba4ec0 -> Node0xba7210;
	Node0xba4fa0 [shape=record,label="{if.else:                                          \l  %71 = load i32, i32* %i, align 4\l  %add120 = add nsw i32 %71, 1\l  %72 = load i32, i32* %n64, align 4\l  %cmp121 = icmp slt i32 %add120, %72\l  br i1 %cmp121, label %if.then123, label %if.end146\l|{<s0>T|<s1>F}}"];
	Node0xba4fa0:s0 -> Node0xba74d0;
	Node0xba4fa0:s1 -> Node0xba75b0;
	Node0xba74d0 [shape=record,label="{if.then123:                                       \l  %73 = load i8*, i8** %z64.addr, align 8\l  %74 = load i32, i32* %i, align 4\l  %idxprom124 = sext i32 %74 to i64\l  %arrayidx125 = getelementptr inbounds i8, i8* %73, i64 %idxprom124\l  %75 = load i8, i8* %arrayidx125, align 1\l  %conv126 = sext i8 %75 to i32\l  %and127 = and i32 %conv126, 127\l  %idxprom128 = sext i32 %and127 to i64\l  %arrayidx129 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom128\l  %76 = load i32, i32* %arrayidx129, align 4\l  store i32 %76, i32* %a, align 4\l  %77 = load i8*, i8** %z64.addr, align 8\l  %78 = load i32, i32* %i, align 4\l  %add130 = add nsw i32 %78, 1\l  %idxprom131 = sext i32 %add130 to i64\l  %arrayidx132 = getelementptr inbounds i8, i8* %77, i64 %idxprom131\l  %79 = load i8, i8* %arrayidx132, align 1\l  %conv133 = sext i8 %79 to i32\l  %and134 = and i32 %conv133, 127\l  %idxprom135 = sext i32 %and134 to i64\l  %arrayidx136 = getelementptr inbounds [128 x i32], [128 x i32]*\l... @Decode64.trans, i64 0, i64 %idxprom135\l  %80 = load i32, i32* %arrayidx136, align 4\l  store i32 %80, i32* %b, align 4\l  %81 = load i32, i32* %a, align 4\l  %shl137 = shl i32 %81, 2\l  %and138 = and i32 %shl137, 252\l  %82 = load i32, i32* %b, align 4\l  %shr139 = ashr i32 %82, 4\l  %and140 = and i32 %shr139, 3\l  %or141 = or i32 %and138, %and140\l  %conv142 = trunc i32 %or141 to i8\l  %83 = load i8*, i8** %zData, align 8\l  %84 = load i32, i32* %j, align 4\l  %inc143 = add nsw i32 %84, 1\l  store i32 %inc143, i32* %j, align 4\l  %idxprom144 = sext i32 %84 to i64\l  %arrayidx145 = getelementptr inbounds i8, i8* %83, i64 %idxprom144\l  store i8 %conv142, i8* %arrayidx145, align 1\l  br label %if.end146\l}"];
	Node0xba74d0 -> Node0xba75b0;
	Node0xba75b0 [shape=record,label="{if.end146:                                        \l  br label %if.end147\l}"];
	Node0xba75b0 -> Node0xba7210;
	Node0xba7210 [shape=record,label="{if.end147:                                        \l  %85 = load i8*, i8** %zData, align 8\l  %86 = load i32, i32* %j, align 4\l  %idxprom148 = sext i32 %86 to i64\l  %arrayidx149 = getelementptr inbounds i8, i8* %85, i64 %idxprom148\l  store i8 0, i8* %arrayidx149, align 1\l  ret void\l}"];
}
