digraph "Scop Graph for 'Decode64' function" {
	label="Scop Graph for 'Decode64' function";

	Node0x18c2600 [shape=record,label="{%1:\l  %2 = alloca i8*, align 8\l  %3 = alloca i8*, align 8\l  %4 = alloca i32, align 4\l  %5 = alloca i32, align 4\l  %6 = alloca i32, align 4\l  %7 = alloca i32, align 4\l  %8 = alloca i32, align 4\l  %9 = alloca i32, align 4\l  %10 = alloca i32, align 4\l  store i8* %0, i8** %2, align 8\l  %11 = load i32, i32* @Decode64.isInit, align 4\l  %12 = icmp ne i32 %11, 0\l  br i1 %12, label %45, label %13\l}"];
	Node0x18c2600 -> Node0x18c1c10;
	Node0x18c2600 -> Node0x18c2840;
	Node0x18c1c10 [shape=record,label="{%45:\l45:                                               \l  %46 = load i8*, i8** %2, align 8\l  %47 = call i64 @strlen(i8* %46) #8\l  %48 = trunc i64 %47 to i32\l  store i32 %48, i32* %4, align 4\l  br label %49\l}"];
	Node0x18c1c10 -> Node0x18c37b0;
	Node0x18c37b0 [shape=record,label="{%49:\l49:                                               \l  %50 = load i32, i32* %4, align 4\l  %51 = icmp sgt i32 %50, 0\l  br i1 %51, label %52, label %61\l}"];
	Node0x18c37b0 -> Node0x18c5180;
	Node0x18c37b0 -> Node0x18c4770;
	Node0x18c5180 [shape=record,label="{%52:\l52:                                               \l  %53 = load i8*, i8** %2, align 8\l  %54 = load i32, i32* %4, align 4\l  %55 = sub nsw i32 %54, 1\l  %56 = sext i32 %55 to i64\l  %57 = getelementptr inbounds i8, i8* %53, i64 %56\l  %58 = load i8, i8* %57, align 1\l  %59 = sext i8 %58 to i32\l  %60 = icmp eq i32 %59, 61\l  br label %61\l}"];
	Node0x18c5180 -> Node0x18c4770;
	Node0x18c4770 [shape=record,label="{%61:\l61:                                               \l  %62 = phi i1 [ false, %49 ], [ %60, %52 ]\l  br i1 %62, label %63, label %66\l}"];
	Node0x18c4770 -> Node0x18bf6c0;
	Node0x18c4770 -> Node0x18c40a0;
	Node0x18bf6c0 [shape=record,label="{%63:\l63:                                               \l  %64 = load i32, i32* %4, align 4\l  %65 = add nsw i32 %64, -1\l  store i32 %65, i32* %4, align 4\l  br label %49\l}"];
	Node0x18bf6c0 -> Node0x18c37b0[constraint=false];
	Node0x18c40a0 [shape=record,label="{%66:\l66:                                               \l  %67 = load i8*, i8** %2, align 8\l  store i8* %67, i8** %3, align 8\l  store i32 0, i32* %6, align 4\l  store i32 0, i32* %5, align 4\l  br label %68\l}"];
	Node0x18c40a0 -> Node0x18c3f70;
	Node0x18c3f70 [shape=record,label="{%68:\l68:                                               \l  %69 = load i32, i32* %5, align 4\l  %70 = add nsw i32 %69, 3\l  %71 = load i32, i32* %4, align 4\l  %72 = icmp slt i32 %70, %71\l  br i1 %72, label %73, label %158\l}"];
	Node0x18c3f70 -> Node0x18c3de0;
	Node0x18c3f70 -> Node0x18c3c50;
	Node0x18c3de0 [shape=record,label="{%73:\l73:                                               \l  %74 = load i8*, i8** %2, align 8\l  %75 = load i32, i32* %5, align 4\l  %76 = sext i32 %75 to i64\l  %77 = getelementptr inbounds i8, i8* %74, i64 %76\l  %78 = load i8, i8* %77, align 1\l  %79 = sext i8 %78 to i32\l  %80 = and i32 %79, 127\l  %81 = sext i32 %80 to i64\l  %82 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %81\l  %83 = load i32, i32* %82, align 4\l  store i32 %83, i32* %7, align 4\l  %84 = load i8*, i8** %2, align 8\l  %85 = load i32, i32* %5, align 4\l  %86 = add nsw i32 %85, 1\l  %87 = sext i32 %86 to i64\l  %88 = getelementptr inbounds i8, i8* %84, i64 %87\l  %89 = load i8, i8* %88, align 1\l  %90 = sext i8 %89 to i32\l  %91 = and i32 %90, 127\l  %92 = sext i32 %91 to i64\l  %93 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %92\l  %94 = load i32, i32* %93, align 4\l  store i32 %94, i32* %8, align 4\l  %95 = load i8*, i8** %2, align 8\l  %96 = load i32, i32* %5, align 4\l  %97 = add nsw i32 %96, 2\l  %98 = sext i32 %97 to i64\l  %99 = getelementptr inbounds i8, i8* %95, i64 %98\l  %100 = load i8, i8* %99, align 1\l  %101 = sext i8 %100 to i32\l  %102 = and i32 %101, 127\l  %103 = sext i32 %102 to i64\l  %104 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %103\l  %105 = load i32, i32* %104, align 4\l  store i32 %105, i32* %9, align 4\l  %106 = load i8*, i8** %2, align 8\l  %107 = load i32, i32* %5, align 4\l  %108 = add nsw i32 %107, 3\l  %109 = sext i32 %108 to i64\l  %110 = getelementptr inbounds i8, i8* %106, i64 %109\l  %111 = load i8, i8* %110, align 1\l  %112 = sext i8 %111 to i32\l  %113 = and i32 %112, 127\l  %114 = sext i32 %113 to i64\l  %115 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %114\l  %116 = load i32, i32* %115, align 4\l  store i32 %116, i32* %10, align 4\l  %117 = load i32, i32* %7, align 4\l  %118 = shl i32 %117, 2\l  %119 = and i32 %118, 252\l  %120 = load i32, i32* %8, align 4\l  %121 = ashr i32 %120, 4\l  %122 = and i32 %121, 3\l  %123 = or i32 %119, %122\l  %124 = trunc i32 %123 to i8\l  %125 = load i8*, i8** %3, align 8\l  %126 = load i32, i32* %6, align 4\l  %127 = add nsw i32 %126, 1\l  store i32 %127, i32* %6, align 4\l  %128 = sext i32 %126 to i64\l  %129 = getelementptr inbounds i8, i8* %125, i64 %128\l  store i8 %124, i8* %129, align 1\l  %130 = load i32, i32* %8, align 4\l  %131 = shl i32 %130, 4\l  %132 = and i32 %131, 240\l  %133 = load i32, i32* %9, align 4\l  %134 = ashr i32 %133, 2\l  %135 = and i32 %134, 15\l  %136 = or i32 %132, %135\l  %137 = trunc i32 %136 to i8\l  %138 = load i8*, i8** %3, align 8\l  %139 = load i32, i32* %6, align 4\l  %140 = add nsw i32 %139, 1\l  store i32 %140, i32* %6, align 4\l  %141 = sext i32 %139 to i64\l  %142 = getelementptr inbounds i8, i8* %138, i64 %141\l  store i8 %137, i8* %142, align 1\l  %143 = load i32, i32* %9, align 4\l  %144 = shl i32 %143, 6\l  %145 = and i32 %144, 192\l  %146 = load i32, i32* %10, align 4\l  %147 = and i32 %146, 63\l  %148 = or i32 %145, %147\l  %149 = trunc i32 %148 to i8\l  %150 = load i8*, i8** %3, align 8\l  %151 = load i32, i32* %6, align 4\l  %152 = add nsw i32 %151, 1\l  store i32 %152, i32* %6, align 4\l  %153 = sext i32 %151 to i64\l  %154 = getelementptr inbounds i8, i8* %150, i64 %153\l  store i8 %149, i8* %154, align 1\l  br label %155\l}"];
	Node0x18c3de0 -> Node0x18c56b0;
	Node0x18c56b0 [shape=record,label="{%155:\l155:                                              \l  %156 = load i32, i32* %5, align 4\l  %157 = add nsw i32 %156, 4\l  store i32 %157, i32* %5, align 4\l  br label %68\l}"];
	Node0x18c56b0 -> Node0x18c3f70[constraint=false];
	Node0x18c3c50 [shape=record,label="{%158:\l158:                                              \l  %159 = load i32, i32* %5, align 4\l  %160 = add nsw i32 %159, 2\l  %161 = load i32, i32* %4, align 4\l  %162 = icmp slt i32 %160, %161\l  br i1 %162, label %163, label %222\l}"];
	Node0x18c3c50 -> Node0x18c6cb0;
	Node0x18c3c50 -> Node0x18c6bc0;
	Node0x18c6cb0 [shape=record,label="{%163:\l163:                                              \l  %164 = load i8*, i8** %2, align 8\l  %165 = load i32, i32* %5, align 4\l  %166 = sext i32 %165 to i64\l  %167 = getelementptr inbounds i8, i8* %164, i64 %166\l  %168 = load i8, i8* %167, align 1\l  %169 = sext i8 %168 to i32\l  %170 = and i32 %169, 127\l  %171 = sext i32 %170 to i64\l  %172 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %171\l  %173 = load i32, i32* %172, align 4\l  store i32 %173, i32* %7, align 4\l  %174 = load i8*, i8** %2, align 8\l  %175 = load i32, i32* %5, align 4\l  %176 = add nsw i32 %175, 1\l  %177 = sext i32 %176 to i64\l  %178 = getelementptr inbounds i8, i8* %174, i64 %177\l  %179 = load i8, i8* %178, align 1\l  %180 = sext i8 %179 to i32\l  %181 = and i32 %180, 127\l  %182 = sext i32 %181 to i64\l  %183 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %182\l  %184 = load i32, i32* %183, align 4\l  store i32 %184, i32* %8, align 4\l  %185 = load i8*, i8** %2, align 8\l  %186 = load i32, i32* %5, align 4\l  %187 = add nsw i32 %186, 2\l  %188 = sext i32 %187 to i64\l  %189 = getelementptr inbounds i8, i8* %185, i64 %188\l  %190 = load i8, i8* %189, align 1\l  %191 = sext i8 %190 to i32\l  %192 = and i32 %191, 127\l  %193 = sext i32 %192 to i64\l  %194 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %193\l  %195 = load i32, i32* %194, align 4\l  store i32 %195, i32* %9, align 4\l  %196 = load i32, i32* %7, align 4\l  %197 = shl i32 %196, 2\l  %198 = and i32 %197, 252\l  %199 = load i32, i32* %8, align 4\l  %200 = ashr i32 %199, 4\l  %201 = and i32 %200, 3\l  %202 = or i32 %198, %201\l  %203 = trunc i32 %202 to i8\l  %204 = load i8*, i8** %3, align 8\l  %205 = load i32, i32* %6, align 4\l  %206 = add nsw i32 %205, 1\l  store i32 %206, i32* %6, align 4\l  %207 = sext i32 %205 to i64\l  %208 = getelementptr inbounds i8, i8* %204, i64 %207\l  store i8 %203, i8* %208, align 1\l  %209 = load i32, i32* %8, align 4\l  %210 = shl i32 %209, 4\l  %211 = and i32 %210, 240\l  %212 = load i32, i32* %9, align 4\l  %213 = ashr i32 %212, 2\l  %214 = and i32 %213, 15\l  %215 = or i32 %211, %214\l  %216 = trunc i32 %215 to i8\l  %217 = load i8*, i8** %3, align 8\l  %218 = load i32, i32* %6, align 4\l  %219 = add nsw i32 %218, 1\l  store i32 %219, i32* %6, align 4\l  %220 = sext i32 %218 to i64\l  %221 = getelementptr inbounds i8, i8* %217, i64 %220\l  store i8 %216, i8* %221, align 1\l  br label %263\l}"];
	Node0x18c6cb0 -> Node0x18c6940;
	Node0x18c6940 [shape=record,label="{%263:\l263:                                              \l  %264 = load i8*, i8** %3, align 8\l  %265 = load i32, i32* %6, align 4\l  %266 = sext i32 %265 to i64\l  %267 = getelementptr inbounds i8, i8* %264, i64 %266\l  store i8 0, i8* %267, align 1\l  ret void\l}"];
	Node0x18c6bc0 [shape=record,label="{%222:\l222:                                              \l  %223 = load i32, i32* %5, align 4\l  %224 = add nsw i32 %223, 1\l  %225 = load i32, i32* %4, align 4\l  %226 = icmp slt i32 %224, %225\l  br i1 %226, label %227, label %262\l}"];
	Node0x18c6bc0 -> Node0x18c6720;
	Node0x18c6bc0 -> Node0x18c63c0;
	Node0x18c6720 [shape=record,label="{%227:\l227:                                              \l  %228 = load i8*, i8** %2, align 8\l  %229 = load i32, i32* %5, align 4\l  %230 = sext i32 %229 to i64\l  %231 = getelementptr inbounds i8, i8* %228, i64 %230\l  %232 = load i8, i8* %231, align 1\l  %233 = sext i8 %232 to i32\l  %234 = and i32 %233, 127\l  %235 = sext i32 %234 to i64\l  %236 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %235\l  %237 = load i32, i32* %236, align 4\l  store i32 %237, i32* %7, align 4\l  %238 = load i8*, i8** %2, align 8\l  %239 = load i32, i32* %5, align 4\l  %240 = add nsw i32 %239, 1\l  %241 = sext i32 %240 to i64\l  %242 = getelementptr inbounds i8, i8* %238, i64 %241\l  %243 = load i8, i8* %242, align 1\l  %244 = sext i8 %243 to i32\l  %245 = and i32 %244, 127\l  %246 = sext i32 %245 to i64\l  %247 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %246\l  %248 = load i32, i32* %247, align 4\l  store i32 %248, i32* %8, align 4\l  %249 = load i32, i32* %7, align 4\l  %250 = shl i32 %249, 2\l  %251 = and i32 %250, 252\l  %252 = load i32, i32* %8, align 4\l  %253 = ashr i32 %252, 4\l  %254 = and i32 %253, 3\l  %255 = or i32 %251, %254\l  %256 = trunc i32 %255 to i8\l  %257 = load i8*, i8** %3, align 8\l  %258 = load i32, i32* %6, align 4\l  %259 = add nsw i32 %258, 1\l  store i32 %259, i32* %6, align 4\l  %260 = sext i32 %258 to i64\l  %261 = getelementptr inbounds i8, i8* %257, i64 %260\l  store i8 %256, i8* %261, align 1\l  br label %262\l}"];
	Node0x18c6720 -> Node0x18c63c0;
	Node0x18c63c0 [shape=record,label="{%262:\l262:                                              \l  br label %263\l}"];
	Node0x18c63c0 -> Node0x18c6940;
	Node0x18c2840 [shape=record,label="{%13:\l13:                                               \l  store i32 0, i32* %5, align 4\l  br label %14\l}"];
	Node0x18c2840 -> Node0x18c60a0;
	Node0x18c60a0 [shape=record,label="{%14:\l14:                                               \l  %15 = load i32, i32* %5, align 4\l  %16 = icmp slt i32 %15, 128\l  br i1 %16, label %17, label %24\l}"];
	Node0x18c60a0 -> Node0x18c5d30;
	Node0x18c60a0 -> Node0x18c6f30;
	Node0x18c5d30 [shape=record,label="{%17:\l17:                                               \l  %18 = load i32, i32* %5, align 4\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %19\l  store i32 0, i32* %20, align 4\l  br label %21\l}"];
	Node0x18c5d30 -> Node0x18c9b40;
	Node0x18c9b40 [shape=record,label="{%21:\l21:                                               \l  %22 = load i32, i32* %5, align 4\l  %23 = add nsw i32 %22, 1\l  store i32 %23, i32* %5, align 4\l  br label %14\l}"];
	Node0x18c9b40 -> Node0x18c60a0[constraint=false];
	Node0x18c6f30 [shape=record,label="{%24:\l24:                                               \l  store i32 0, i32* %5, align 4\l  br label %25\l}"];
	Node0x18c6f30 -> Node0x18c9250;
	Node0x18c9250 [shape=record,label="{%25:\l25:                                               \l  %26 = load i32, i32* %5, align 4\l  %27 = sext i32 %26 to i64\l  %28 = getelementptr inbounds [65 x i8], [65 x i8]* @Decode64.zBase, i64 0,\l... i64 %27\l  %29 = load i8, i8* %28, align 1\l  %30 = icmp ne i8 %29, 0\l  br i1 %30, label %31, label %44\l}"];
	Node0x18c9250 -> Node0x18c8db0;
	Node0x18c9250 -> Node0x18c89e0;
	Node0x18c8db0 [shape=record,label="{%31:\l31:                                               \l  %32 = load i32, i32* %5, align 4\l  %33 = load i32, i32* %5, align 4\l  %34 = sext i32 %33 to i64\l  %35 = getelementptr inbounds [65 x i8], [65 x i8]* @Decode64.zBase, i64 0,\l... i64 %34\l  %36 = load i8, i8* %35, align 1\l  %37 = zext i8 %36 to i32\l  %38 = and i32 %37, 127\l  %39 = sext i32 %38 to i64\l  %40 = getelementptr inbounds [128 x i32], [128 x i32]* @Decode64.trans, i64\l... 0, i64 %39\l  store i32 %32, i32* %40, align 4\l  br label %41\l}"];
	Node0x18c8db0 -> Node0x18c8390;
	Node0x18c8390 [shape=record,label="{%41:\l41:                                               \l  %42 = load i32, i32* %5, align 4\l  %43 = add nsw i32 %42, 1\l  store i32 %43, i32* %5, align 4\l  br label %25\l}"];
	Node0x18c8390 -> Node0x18c9250[constraint=false];
	Node0x18c89e0 [shape=record,label="{%44:\l44:                                               \l  store i32 1, i32* @Decode64.isInit, align 4\l  br label %45\l}"];
	Node0x18c89e0 -> Node0x18c1c10;
	colorscheme = "paired12"
        subgraph cluster_0x18e7b40 {
          label = "";
          style = solid;
          color = 1
          subgraph cluster_0x18f2b60 {
            label = "Region containing entry block of function is invalid!";
            style = solid;
            color = 6
            subgraph cluster_0x18eba70 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: ";
              style = solid;
              color = 5
              Node0x18c60a0;
              Node0x18c5d30;
              Node0x18c9b40;
            }
            subgraph cluster_0x18e8110 {
              label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: ";
              style = solid;
              color = 5
              Node0x18c9250;
              Node0x18c8db0;
              Node0x18c8390;
            }
            Node0x18c2600;
            Node0x18c2840;
            Node0x18c6f30;
            Node0x18c89e0;
          }
          subgraph cluster_0x18f4510 {
            label = "Condition in BB '' neither constant nor an icmp instruction";
            style = solid;
            color = 6
            subgraph cluster_0x18f9120 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x18c37b0;
              Node0x18c5180;
            }
            Node0x18c4770;
            Node0x18bf6c0;
          }
          subgraph cluster_0x18f78a0 {
            label = "Non affine loop bound '***COULDNOTCOMPUTE***' in loop: ";
            style = solid;
            color = 6
            Node0x18c3f70;
            Node0x18c3de0;
            Node0x18c56b0;
          }
          subgraph cluster_0x18e7bc0 {
            label = "Region can not profitably be optimized!";
            style = solid;
            color = 6
            subgraph cluster_0x18f7760 {
              label = "Region can not profitably be optimized!";
              style = solid;
              color = 5
              Node0x18c6bc0;
              Node0x18c6720;
            }
            Node0x18c3c50;
            Node0x18c6cb0;
            Node0x18c63c0;
          }
          Node0x18c1c10;
          Node0x18c40a0;
          Node0x18c6940;
        }
}
